


//-----------------------------------------------------------------------------
// <copyright file="ActiveRecord.cs" company="WheelMUD Development Team">
//   Copyright (c) WheelMUD Development Team. See LICENSE.txt. This file is
//   subject to the Microsoft Permissive License. All other rights reserved.
// </copyright>
// <summary>
//   auto-generated
// </summary>
//-----------------------------------------------------------------------------

namespace PBM.DAL
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Data;
	using SubSonic.DataProviders;
	using SubSonic.Extensions;
	using System.Linq.Expressions;
	using SubSonic.Schema;
	using SubSonic.Repository;
	using System.Data.Common;

	#region ActiveTableReportX Class
	   
    /// <summary>
    /// A class which represents the ActiveTableReportX table in the PBM Database.
    /// </summary>
    public partial class ActiveTableReportX: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<ActiveTableReportX> TestItems;
        static TestRepository<ActiveTableReportX> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<ActiveTableReportX>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<ActiveTableReportX> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(ActiveTableReportX item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                ActiveTableReportX item=new ActiveTableReportX();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<ActiveTableReportX> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public ActiveTableReportX(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                ActiveTableReportX.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ActiveTableReportX>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public ActiveTableReportX()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public ActiveTableReportX(Expression<Func<ActiveTableReportX, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<ActiveTableReportX> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<ActiveTableReportX> _repo;
            
            if(db.TestMode)
            {
                ActiveTableReportX.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ActiveTableReportX>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<ActiveTableReportX> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static ActiveTableReportX SingleOrDefault(Expression<Func<ActiveTableReportX, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<ActiveTableReportX>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<ActiveTableReportX>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static ActiveTableReportX SingleOrDefault(Expression<Func<ActiveTableReportX, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<ActiveTableReportX>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<ActiveTableReportX>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<ActiveTableReportX, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<ActiveTableReportX, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<ActiveTableReportX> Find(Expression<Func<ActiveTableReportX, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<ActiveTableReportX>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<ActiveTableReportX>();
        }
        
        public static IList<ActiveTableReportX> Find(Expression<Func<ActiveTableReportX, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<ActiveTableReportX>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<ActiveTableReportX>();
        }
        
        public static IQueryable<ActiveTableReportX> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<ActiveTableReportX> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ActiveTableReportX> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ActiveTableReportX> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ActiveTableReportX> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<ActiveTableReportX> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(ActiveTableReportX))
            {
                ActiveTableReportX compare=(ActiveTableReportX)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _ivalue;
        public string ivalue
        {
            get 
            { 
				return _ivalue; 
            }
            
            set
            {                
                _ivalue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ivalue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<ActiveTableReportX>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<ActiveTableReportX, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region AllReportXD Class
	   
    /// <summary>
    /// A class which represents the AllReportXD table in the PBM Database.
    /// </summary>
    public partial class AllReportXD: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<AllReportXD> TestItems;
        static TestRepository<AllReportXD> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<AllReportXD>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<AllReportXD> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(AllReportXD item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                AllReportXD item=new AllReportXD();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<AllReportXD> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public AllReportXD(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                AllReportXD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<AllReportXD>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public AllReportXD()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public AllReportXD(Expression<Func<AllReportXD, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<AllReportXD> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<AllReportXD> _repo;
            
            if(db.TestMode)
            {
                AllReportXD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<AllReportXD>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<AllReportXD> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static AllReportXD SingleOrDefault(Expression<Func<AllReportXD, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<AllReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<AllReportXD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static AllReportXD SingleOrDefault(Expression<Func<AllReportXD, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<AllReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<AllReportXD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<AllReportXD, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<AllReportXD, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<AllReportXD> Find(Expression<Func<AllReportXD, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<AllReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<AllReportXD>();
        }
        
        public static IList<AllReportXD> Find(Expression<Func<AllReportXD, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<AllReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<AllReportXD>();
        }
        
        public static IQueryable<AllReportXD> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<AllReportXD> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AllReportXD> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AllReportXD> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AllReportXD> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<AllReportXD> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "ino";
        }

        public object KeyValue()
        {
            return this.ino;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(AllReportXD))
            {
                AllReportXD compare=(AllReportXD)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "ino";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _ino;
        public long? ino
        {
            get 
            { 
				return _ino; 
            }
            
            set
            {                
                _ino=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ino");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iCount;
        public string iCount
        {
            get 
            { 
				return _iCount; 
            }
            
            set
            {                
                _iCount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iCount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<AllReportXD>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<AllReportXD, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region AllReportXP Class
	   
    /// <summary>
    /// A class which represents the AllReportXP table in the PBM Database.
    /// </summary>
    public partial class AllReportXP: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<AllReportXP> TestItems;
        static TestRepository<AllReportXP> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<AllReportXP>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<AllReportXP> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(AllReportXP item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                AllReportXP item=new AllReportXP();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<AllReportXP> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public AllReportXP(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                AllReportXP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<AllReportXP>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public AllReportXP()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public AllReportXP(Expression<Func<AllReportXP, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<AllReportXP> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<AllReportXP> _repo;
            
            if(db.TestMode)
            {
                AllReportXP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<AllReportXP>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<AllReportXP> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static AllReportXP SingleOrDefault(Expression<Func<AllReportXP, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<AllReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<AllReportXP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static AllReportXP SingleOrDefault(Expression<Func<AllReportXP, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<AllReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<AllReportXP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<AllReportXP, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<AllReportXP, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<AllReportXP> Find(Expression<Func<AllReportXP, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<AllReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<AllReportXP>();
        }
        
        public static IList<AllReportXP> Find(Expression<Func<AllReportXP, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<AllReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<AllReportXP>();
        }
        
        public static IQueryable<AllReportXP> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<AllReportXP> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AllReportXP> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AllReportXP> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AllReportXP> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<AllReportXP> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "ino";
        }

        public object KeyValue()
        {
            return this.ino;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(AllReportXP))
            {
                AllReportXP compare=(AllReportXP)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "ino";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _ino;
        public long? ino
        {
            get 
            { 
				return _ino; 
            }
            
            set
            {                
                _ino=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ino");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iCount;
        public string iCount
        {
            get 
            { 
				return _iCount; 
            }
            
            set
            {                
                _iCount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iCount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<AllReportXP>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<AllReportXP, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region AllReportZD Class
	   
    /// <summary>
    /// A class which represents the AllReportZD table in the PBM Database.
    /// </summary>
    public partial class AllReportZD: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<AllReportZD> TestItems;
        static TestRepository<AllReportZD> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<AllReportZD>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<AllReportZD> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(AllReportZD item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                AllReportZD item=new AllReportZD();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<AllReportZD> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public AllReportZD(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                AllReportZD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<AllReportZD>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public AllReportZD()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public AllReportZD(Expression<Func<AllReportZD, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<AllReportZD> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<AllReportZD> _repo;
            
            if(db.TestMode)
            {
                AllReportZD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<AllReportZD>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<AllReportZD> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static AllReportZD SingleOrDefault(Expression<Func<AllReportZD, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<AllReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<AllReportZD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static AllReportZD SingleOrDefault(Expression<Func<AllReportZD, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<AllReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<AllReportZD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<AllReportZD, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<AllReportZD, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<AllReportZD> Find(Expression<Func<AllReportZD, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<AllReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<AllReportZD>();
        }
        
        public static IList<AllReportZD> Find(Expression<Func<AllReportZD, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<AllReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<AllReportZD>();
        }
        
        public static IQueryable<AllReportZD> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<AllReportZD> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AllReportZD> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AllReportZD> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AllReportZD> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<AllReportZD> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "ino";
        }

        public object KeyValue()
        {
            return this.ino;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(AllReportZD))
            {
                AllReportZD compare=(AllReportZD)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "ino";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _ino;
        public long? ino
        {
            get 
            { 
				return _ino; 
            }
            
            set
            {                
                _ino=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ino");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iCount;
        public string iCount
        {
            get 
            { 
				return _iCount; 
            }
            
            set
            {                
                _iCount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iCount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<AllReportZD>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<AllReportZD, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region AllReportZP Class
	   
    /// <summary>
    /// A class which represents the AllReportZP table in the PBM Database.
    /// </summary>
    public partial class AllReportZP: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<AllReportZP> TestItems;
        static TestRepository<AllReportZP> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<AllReportZP>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<AllReportZP> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(AllReportZP item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                AllReportZP item=new AllReportZP();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<AllReportZP> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public AllReportZP(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                AllReportZP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<AllReportZP>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public AllReportZP()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public AllReportZP(Expression<Func<AllReportZP, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<AllReportZP> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<AllReportZP> _repo;
            
            if(db.TestMode)
            {
                AllReportZP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<AllReportZP>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<AllReportZP> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static AllReportZP SingleOrDefault(Expression<Func<AllReportZP, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<AllReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<AllReportZP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static AllReportZP SingleOrDefault(Expression<Func<AllReportZP, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<AllReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<AllReportZP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<AllReportZP, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<AllReportZP, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<AllReportZP> Find(Expression<Func<AllReportZP, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<AllReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<AllReportZP>();
        }
        
        public static IList<AllReportZP> Find(Expression<Func<AllReportZP, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<AllReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<AllReportZP>();
        }
        
        public static IQueryable<AllReportZP> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<AllReportZP> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AllReportZP> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AllReportZP> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AllReportZP> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<AllReportZP> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "ino";
        }

        public object KeyValue()
        {
            return this.ino;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(AllReportZP))
            {
                AllReportZP compare=(AllReportZP)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "ino";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _ino;
        public long? ino
        {
            get 
            { 
				return _ino; 
            }
            
            set
            {                
                _ino=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ino");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iCount;
        public string iCount
        {
            get 
            { 
				return _iCount; 
            }
            
            set
            {                
                _iCount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iCount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<AllReportZP>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<AllReportZP, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region AllReportZP1 Class
	   
    /// <summary>
    /// A class which represents the AllReportZP1 table in the PBM Database.
    /// </summary>
    public partial class AllReportZP1: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<AllReportZP1> TestItems;
        static TestRepository<AllReportZP1> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<AllReportZP1>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<AllReportZP1> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(AllReportZP1 item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                AllReportZP1 item=new AllReportZP1();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<AllReportZP1> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public AllReportZP1(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                AllReportZP1.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<AllReportZP1>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public AllReportZP1()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public AllReportZP1(Expression<Func<AllReportZP1, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<AllReportZP1> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<AllReportZP1> _repo;
            
            if(db.TestMode)
            {
                AllReportZP1.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<AllReportZP1>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<AllReportZP1> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static AllReportZP1 SingleOrDefault(Expression<Func<AllReportZP1, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<AllReportZP1>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<AllReportZP1>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static AllReportZP1 SingleOrDefault(Expression<Func<AllReportZP1, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<AllReportZP1>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<AllReportZP1>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<AllReportZP1, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<AllReportZP1, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<AllReportZP1> Find(Expression<Func<AllReportZP1, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<AllReportZP1>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<AllReportZP1>();
        }
        
        public static IList<AllReportZP1> Find(Expression<Func<AllReportZP1, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<AllReportZP1>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<AllReportZP1>();
        }
        
        public static IQueryable<AllReportZP1> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<AllReportZP1> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AllReportZP1> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AllReportZP1> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AllReportZP1> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<AllReportZP1> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "ino";
        }

        public object KeyValue()
        {
            return this.ino;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(AllReportZP1))
            {
                AllReportZP1 compare=(AllReportZP1)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "ino";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _ino;
        public long? ino
        {
            get 
            { 
				return _ino; 
            }
            
            set
            {                
                _ino=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ino");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iCount;
        public string iCount
        {
            get 
            { 
				return _iCount; 
            }
            
            set
            {                
                _iCount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iCount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<AllReportZP1>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<AllReportZP1, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region ClerkLogReportX Class
	   
    /// <summary>
    /// A class which represents the ClerkLogReportX table in the PBM Database.
    /// </summary>
    public partial class ClerkLogReportX: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<ClerkLogReportX> TestItems;
        static TestRepository<ClerkLogReportX> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<ClerkLogReportX>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<ClerkLogReportX> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(ClerkLogReportX item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                ClerkLogReportX item=new ClerkLogReportX();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<ClerkLogReportX> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public ClerkLogReportX(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                ClerkLogReportX.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ClerkLogReportX>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public ClerkLogReportX()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public ClerkLogReportX(Expression<Func<ClerkLogReportX, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<ClerkLogReportX> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<ClerkLogReportX> _repo;
            
            if(db.TestMode)
            {
                ClerkLogReportX.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ClerkLogReportX>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<ClerkLogReportX> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static ClerkLogReportX SingleOrDefault(Expression<Func<ClerkLogReportX, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<ClerkLogReportX>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<ClerkLogReportX>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static ClerkLogReportX SingleOrDefault(Expression<Func<ClerkLogReportX, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<ClerkLogReportX>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<ClerkLogReportX>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<ClerkLogReportX, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<ClerkLogReportX, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<ClerkLogReportX> Find(Expression<Func<ClerkLogReportX, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<ClerkLogReportX>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<ClerkLogReportX>();
        }
        
        public static IList<ClerkLogReportX> Find(Expression<Func<ClerkLogReportX, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<ClerkLogReportX>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<ClerkLogReportX>();
        }
        
        public static IQueryable<ClerkLogReportX> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<ClerkLogReportX> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ClerkLogReportX> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ClerkLogReportX> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ClerkLogReportX> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<ClerkLogReportX> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(ClerkLogReportX))
            {
                ClerkLogReportX compare=(ClerkLogReportX)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _istart;
        public string istart
        {
            get 
            { 
				return _istart; 
            }
            
            set
            {                
                _istart=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="istart");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iend;
        public string iend
        {
            get 
            { 
				return _iend; 
            }
            
            set
            {                
                _iend=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iend");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<ClerkLogReportX>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<ClerkLogReportX, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region ClerkLogReportZ Class
	   
    /// <summary>
    /// A class which represents the ClerkLogReportZ table in the PBM Database.
    /// </summary>
    public partial class ClerkLogReportZ: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<ClerkLogReportZ> TestItems;
        static TestRepository<ClerkLogReportZ> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<ClerkLogReportZ>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<ClerkLogReportZ> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(ClerkLogReportZ item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                ClerkLogReportZ item=new ClerkLogReportZ();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<ClerkLogReportZ> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public ClerkLogReportZ(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                ClerkLogReportZ.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ClerkLogReportZ>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public ClerkLogReportZ()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public ClerkLogReportZ(Expression<Func<ClerkLogReportZ, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<ClerkLogReportZ> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<ClerkLogReportZ> _repo;
            
            if(db.TestMode)
            {
                ClerkLogReportZ.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ClerkLogReportZ>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<ClerkLogReportZ> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static ClerkLogReportZ SingleOrDefault(Expression<Func<ClerkLogReportZ, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<ClerkLogReportZ>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<ClerkLogReportZ>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static ClerkLogReportZ SingleOrDefault(Expression<Func<ClerkLogReportZ, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<ClerkLogReportZ>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<ClerkLogReportZ>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<ClerkLogReportZ, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<ClerkLogReportZ, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<ClerkLogReportZ> Find(Expression<Func<ClerkLogReportZ, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<ClerkLogReportZ>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<ClerkLogReportZ>();
        }
        
        public static IList<ClerkLogReportZ> Find(Expression<Func<ClerkLogReportZ, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<ClerkLogReportZ>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<ClerkLogReportZ>();
        }
        
        public static IQueryable<ClerkLogReportZ> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<ClerkLogReportZ> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ClerkLogReportZ> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ClerkLogReportZ> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ClerkLogReportZ> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<ClerkLogReportZ> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(ClerkLogReportZ))
            {
                ClerkLogReportZ compare=(ClerkLogReportZ)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _istart;
        public string istart
        {
            get 
            { 
				return _istart; 
            }
            
            set
            {                
                _istart=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="istart");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iend;
        public string iend
        {
            get 
            { 
				return _iend; 
            }
            
            set
            {                
                _iend=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iend");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<ClerkLogReportZ>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<ClerkLogReportZ, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region ClerkReportXD Class
	   
    /// <summary>
    /// A class which represents the ClerkReportXD table in the PBM Database.
    /// </summary>
    public partial class ClerkReportXD: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<ClerkReportXD> TestItems;
        static TestRepository<ClerkReportXD> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<ClerkReportXD>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<ClerkReportXD> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(ClerkReportXD item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                ClerkReportXD item=new ClerkReportXD();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<ClerkReportXD> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public ClerkReportXD(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                ClerkReportXD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ClerkReportXD>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public ClerkReportXD()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public ClerkReportXD(Expression<Func<ClerkReportXD, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<ClerkReportXD> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<ClerkReportXD> _repo;
            
            if(db.TestMode)
            {
                ClerkReportXD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ClerkReportXD>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<ClerkReportXD> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static ClerkReportXD SingleOrDefault(Expression<Func<ClerkReportXD, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<ClerkReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<ClerkReportXD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static ClerkReportXD SingleOrDefault(Expression<Func<ClerkReportXD, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<ClerkReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<ClerkReportXD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<ClerkReportXD, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<ClerkReportXD, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<ClerkReportXD> Find(Expression<Func<ClerkReportXD, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<ClerkReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<ClerkReportXD>();
        }
        
        public static IList<ClerkReportXD> Find(Expression<Func<ClerkReportXD, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<ClerkReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<ClerkReportXD>();
        }
        
        public static IQueryable<ClerkReportXD> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<ClerkReportXD> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ClerkReportXD> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ClerkReportXD> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ClerkReportXD> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<ClerkReportXD> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(ClerkReportXD))
            {
                ClerkReportXD compare=(ClerkReportXD)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<ClerkReportXD>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<ClerkReportXD, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region ClerkReportXP Class
	   
    /// <summary>
    /// A class which represents the ClerkReportXP table in the PBM Database.
    /// </summary>
    public partial class ClerkReportXP: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<ClerkReportXP> TestItems;
        static TestRepository<ClerkReportXP> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<ClerkReportXP>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<ClerkReportXP> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(ClerkReportXP item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                ClerkReportXP item=new ClerkReportXP();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<ClerkReportXP> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public ClerkReportXP(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                ClerkReportXP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ClerkReportXP>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public ClerkReportXP()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public ClerkReportXP(Expression<Func<ClerkReportXP, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<ClerkReportXP> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<ClerkReportXP> _repo;
            
            if(db.TestMode)
            {
                ClerkReportXP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ClerkReportXP>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<ClerkReportXP> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static ClerkReportXP SingleOrDefault(Expression<Func<ClerkReportXP, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<ClerkReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<ClerkReportXP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static ClerkReportXP SingleOrDefault(Expression<Func<ClerkReportXP, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<ClerkReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<ClerkReportXP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<ClerkReportXP, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<ClerkReportXP, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<ClerkReportXP> Find(Expression<Func<ClerkReportXP, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<ClerkReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<ClerkReportXP>();
        }
        
        public static IList<ClerkReportXP> Find(Expression<Func<ClerkReportXP, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<ClerkReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<ClerkReportXP>();
        }
        
        public static IQueryable<ClerkReportXP> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<ClerkReportXP> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ClerkReportXP> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ClerkReportXP> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ClerkReportXP> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<ClerkReportXP> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(ClerkReportXP))
            {
                ClerkReportXP compare=(ClerkReportXP)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<ClerkReportXP>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<ClerkReportXP, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region ClerkReportXP1 Class
	   
    /// <summary>
    /// A class which represents the ClerkReportXP1 table in the PBM Database.
    /// </summary>
    public partial class ClerkReportXP1: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<ClerkReportXP1> TestItems;
        static TestRepository<ClerkReportXP1> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<ClerkReportXP1>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<ClerkReportXP1> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(ClerkReportXP1 item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                ClerkReportXP1 item=new ClerkReportXP1();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<ClerkReportXP1> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public ClerkReportXP1(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                ClerkReportXP1.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ClerkReportXP1>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public ClerkReportXP1()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public ClerkReportXP1(Expression<Func<ClerkReportXP1, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<ClerkReportXP1> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<ClerkReportXP1> _repo;
            
            if(db.TestMode)
            {
                ClerkReportXP1.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ClerkReportXP1>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<ClerkReportXP1> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static ClerkReportXP1 SingleOrDefault(Expression<Func<ClerkReportXP1, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<ClerkReportXP1>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<ClerkReportXP1>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static ClerkReportXP1 SingleOrDefault(Expression<Func<ClerkReportXP1, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<ClerkReportXP1>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<ClerkReportXP1>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<ClerkReportXP1, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<ClerkReportXP1, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<ClerkReportXP1> Find(Expression<Func<ClerkReportXP1, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<ClerkReportXP1>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<ClerkReportXP1>();
        }
        
        public static IList<ClerkReportXP1> Find(Expression<Func<ClerkReportXP1, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<ClerkReportXP1>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<ClerkReportXP1>();
        }
        
        public static IQueryable<ClerkReportXP1> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<ClerkReportXP1> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ClerkReportXP1> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ClerkReportXP1> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ClerkReportXP1> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<ClerkReportXP1> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(ClerkReportXP1))
            {
                ClerkReportXP1 compare=(ClerkReportXP1)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<ClerkReportXP1>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<ClerkReportXP1, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region ClerkReportZD Class
	   
    /// <summary>
    /// A class which represents the ClerkReportZD table in the PBM Database.
    /// </summary>
    public partial class ClerkReportZD: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<ClerkReportZD> TestItems;
        static TestRepository<ClerkReportZD> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<ClerkReportZD>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<ClerkReportZD> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(ClerkReportZD item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                ClerkReportZD item=new ClerkReportZD();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<ClerkReportZD> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public ClerkReportZD(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                ClerkReportZD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ClerkReportZD>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public ClerkReportZD()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public ClerkReportZD(Expression<Func<ClerkReportZD, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<ClerkReportZD> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<ClerkReportZD> _repo;
            
            if(db.TestMode)
            {
                ClerkReportZD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ClerkReportZD>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<ClerkReportZD> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static ClerkReportZD SingleOrDefault(Expression<Func<ClerkReportZD, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<ClerkReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<ClerkReportZD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static ClerkReportZD SingleOrDefault(Expression<Func<ClerkReportZD, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<ClerkReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<ClerkReportZD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<ClerkReportZD, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<ClerkReportZD, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<ClerkReportZD> Find(Expression<Func<ClerkReportZD, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<ClerkReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<ClerkReportZD>();
        }
        
        public static IList<ClerkReportZD> Find(Expression<Func<ClerkReportZD, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<ClerkReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<ClerkReportZD>();
        }
        
        public static IQueryable<ClerkReportZD> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<ClerkReportZD> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ClerkReportZD> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ClerkReportZD> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ClerkReportZD> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<ClerkReportZD> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(ClerkReportZD))
            {
                ClerkReportZD compare=(ClerkReportZD)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<ClerkReportZD>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<ClerkReportZD, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region ClerkReportZP Class
	   
    /// <summary>
    /// A class which represents the ClerkReportZP table in the PBM Database.
    /// </summary>
    public partial class ClerkReportZP: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<ClerkReportZP> TestItems;
        static TestRepository<ClerkReportZP> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<ClerkReportZP>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<ClerkReportZP> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(ClerkReportZP item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                ClerkReportZP item=new ClerkReportZP();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<ClerkReportZP> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public ClerkReportZP(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                ClerkReportZP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ClerkReportZP>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public ClerkReportZP()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public ClerkReportZP(Expression<Func<ClerkReportZP, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<ClerkReportZP> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<ClerkReportZP> _repo;
            
            if(db.TestMode)
            {
                ClerkReportZP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<ClerkReportZP>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<ClerkReportZP> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static ClerkReportZP SingleOrDefault(Expression<Func<ClerkReportZP, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<ClerkReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<ClerkReportZP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static ClerkReportZP SingleOrDefault(Expression<Func<ClerkReportZP, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<ClerkReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<ClerkReportZP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<ClerkReportZP, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<ClerkReportZP, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<ClerkReportZP> Find(Expression<Func<ClerkReportZP, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<ClerkReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<ClerkReportZP>();
        }
        
        public static IList<ClerkReportZP> Find(Expression<Func<ClerkReportZP, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<ClerkReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<ClerkReportZP>();
        }
        
        public static IQueryable<ClerkReportZP> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<ClerkReportZP> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ClerkReportZP> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ClerkReportZP> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ClerkReportZP> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<ClerkReportZP> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(ClerkReportZP))
            {
                ClerkReportZP compare=(ClerkReportZP)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<ClerkReportZP>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<ClerkReportZP, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region CookMsg Class
	   
    /// <summary>
    /// A class which represents the CookMsg table in the PBM Database.
    /// </summary>
    public partial class CookMsg: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<CookMsg> TestItems;
        static TestRepository<CookMsg> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<CookMsg>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<CookMsg> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(CookMsg item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                CookMsg item=new CookMsg();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<CookMsg> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public CookMsg(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                CookMsg.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<CookMsg>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public CookMsg()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public CookMsg(Expression<Func<CookMsg, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<CookMsg> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<CookMsg> _repo;
            
            if(db.TestMode)
            {
                CookMsg.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<CookMsg>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<CookMsg> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static CookMsg SingleOrDefault(Expression<Func<CookMsg, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<CookMsg>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<CookMsg>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static CookMsg SingleOrDefault(Expression<Func<CookMsg, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<CookMsg>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<CookMsg>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<CookMsg, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<CookMsg, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<CookMsg> Find(Expression<Func<CookMsg, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<CookMsg>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<CookMsg>();
        }
        
        public static IList<CookMsg> Find(Expression<Func<CookMsg, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<CookMsg>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<CookMsg>();
        }
        
        public static IQueryable<CookMsg> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<CookMsg> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<CookMsg> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<CookMsg> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<CookMsg> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<CookMsg> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "ino";
        }

        public object KeyValue()
        {
            return this.ino;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.description.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(CookMsg))
            {
                CookMsg compare=(CookMsg)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.description.ToString();
        }

        public string DescriptorColumn() 
        {
            return "description";
        }
        
        public static string GetKeyColumn()
        {
            return "ino";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "description";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long _ino;
        public long ino
        {
            get 
            { 
				return _ino; 
            }
            
            set
            {                
                _ino=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ino");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _description;
        public string description
        {
            get 
            { 
				return _description; 
            }
            
            set
            {                
                _description=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="description");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<CookMsg>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<CookMsg, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region Coupon Class
	   
    /// <summary>
    /// A class which represents the Coupon table in the PBM Database.
    /// </summary>
    public partial class Coupon: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<Coupon> TestItems;
        static TestRepository<Coupon> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<Coupon>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<Coupon> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(Coupon item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Coupon item=new Coupon();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<Coupon> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public Coupon(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Coupon.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Coupon>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public Coupon()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public Coupon(Expression<Func<Coupon, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<Coupon> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<Coupon> _repo;
            
            if(db.TestMode)
            {
                Coupon.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Coupon>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<Coupon> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Coupon SingleOrDefault(Expression<Func<Coupon, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<Coupon>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<Coupon>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static Coupon SingleOrDefault(Expression<Func<Coupon, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<Coupon>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<Coupon>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<Coupon, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<Coupon, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<Coupon> Find(Expression<Func<Coupon, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<Coupon>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<Coupon>();
        }
        
        public static IList<Coupon> Find(Expression<Func<Coupon, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<Coupon>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<Coupon>();
        }
        
        public static IQueryable<Coupon> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<Coupon> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Coupon> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Coupon> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Coupon> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<Coupon> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "idescription";
        }

        public object KeyValue()
        {
            return this.idescription;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.idescription.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(Coupon))
            {
                Coupon compare=(Coupon)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.idescription.ToString();
        }

        public string DescriptorColumn() 
        {
            return "idescription";
        }
        
        public static string GetKeyColumn()
        {
            return "idescription";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "idescription";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _idescription;
        public string idescription
        {
            get 
            { 
				return _idescription; 
            }
            
            set
            {                
                _idescription=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="idescription");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Price;
        public string Price
        {
            get 
            { 
				return _Price; 
            }
            
            set
            {                
                _Price=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Price");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Attribute;
        public string Attribute
        {
            get 
            { 
				return _Attribute; 
            }
            
            set
            {                
                _Attribute=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Attribute");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _halo;
        public string halo
        {
            get 
            { 
				return _halo; 
            }
            
            set
            {                
                _halo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="halo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc1;
        public string Desc1
        {
            get 
            { 
				return _Desc1; 
            }
            
            set
            {                
                _Desc1=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc1");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc2;
        public string Desc2
        {
            get 
            { 
				return _Desc2; 
            }
            
            set
            {                
                _Desc2=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc2");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc3;
        public string Desc3
        {
            get 
            { 
				return _Desc3; 
            }
            
            set
            {                
                _Desc3=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc3");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc4;
        public string Desc4
        {
            get 
            { 
				return _Desc4; 
            }
            
            set
            {                
                _Desc4=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc4");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc5;
        public string Desc5
        {
            get 
            { 
				return _Desc5; 
            }
            
            set
            {                
                _Desc5=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc5");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc6;
        public string Desc6
        {
            get 
            { 
				return _Desc6; 
            }
            
            set
            {                
                _Desc6=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc6");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc7;
        public string Desc7
        {
            get 
            { 
				return _Desc7; 
            }
            
            set
            {                
                _Desc7=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc7");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc8;
        public string Desc8
        {
            get 
            { 
				return _Desc8; 
            }
            
            set
            {                
                _Desc8=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc8");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc9;
        public string Desc9
        {
            get 
            { 
				return _Desc9; 
            }
            
            set
            {                
                _Desc9=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc9");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc10;
        public string Desc10
        {
            get 
            { 
				return _Desc10; 
            }
            
            set
            {                
                _Desc10=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc10");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc11;
        public string Desc11
        {
            get 
            { 
				return _Desc11; 
            }
            
            set
            {                
                _Desc11=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc11");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc12;
        public string Desc12
        {
            get 
            { 
				return _Desc12; 
            }
            
            set
            {                
                _Desc12=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc12");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc13;
        public string Desc13
        {
            get 
            { 
				return _Desc13; 
            }
            
            set
            {                
                _Desc13=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc13");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc14;
        public string Desc14
        {
            get 
            { 
				return _Desc14; 
            }
            
            set
            {                
                _Desc14=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc14");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc15;
        public string Desc15
        {
            get 
            { 
				return _Desc15; 
            }
            
            set
            {                
                _Desc15=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc15");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc16;
        public string Desc16
        {
            get 
            { 
				return _Desc16; 
            }
            
            set
            {                
                _Desc16=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc16");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<Coupon>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<Coupon, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region Department Class
	   
    /// <summary>
    /// A class which represents the Department table in the PBM Database.
    /// </summary>
    public partial class Department: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<Department> TestItems;
        static TestRepository<Department> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<Department>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<Department> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(Department item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Department item=new Department();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<Department> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public Department(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Department.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Department>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public Department()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public Department(Expression<Func<Department, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<Department> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<Department> _repo;
            
            if(db.TestMode)
            {
                Department.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Department>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<Department> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Department SingleOrDefault(Expression<Func<Department, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<Department>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<Department>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static Department SingleOrDefault(Expression<Func<Department, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<Department>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<Department>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<Department, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<Department, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<Department> Find(Expression<Func<Department, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<Department>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<Department>();
        }
        
        public static IList<Department> Find(Expression<Func<Department, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<Department>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<Department>();
        }
        
        public static IQueryable<Department> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<Department> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Department> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Department> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Department> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<Department> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iNo.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(Department))
            {
                Department compare=(Department)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iNo.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iNo";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iNo";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iNo;
        public string iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Description;
        public string Description
        {
            get 
            { 
				return _Description; 
            }
            
            set
            {                
                _Description=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Price;
        public string Price
        {
            get 
            { 
				return _Price; 
            }
            
            set
            {                
                _Price=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Price");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Pre_Price;
        public string Pre_Price
        {
            get 
            { 
				return _Pre_Price; 
            }
            
            set
            {                
                _Pre_Price=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Pre_Price");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _Status;
        public long? Status
        {
            get 
            { 
				return _Status; 
            }
            
            set
            {                
                _Status=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Status");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _T_V_Code;
        public string T_V_Code
        {
            get 
            { 
				return _T_V_Code; 
            }
            
            set
            {                
                _T_V_Code=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="T_V_Code");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Dept_Group;
        public string Dept_Group
        {
            get 
            { 
				return _Dept_Group; 
            }
            
            set
            {                
                _Dept_Group=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dept_Group");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _dept_mode;
        public long? dept_mode
        {
            get 
            { 
				return _dept_mode; 
            }
            
            set
            {                
                _dept_mode=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="dept_mode");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _Age_select;
        public long? Age_select
        {
            get 
            { 
				return _Age_select; 
            }
            
            set
            {                
                _Age_select=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Age_select");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _PriceMat;
        public string PriceMat
        {
            get 
            { 
				return _PriceMat; 
            }
            
            set
            {                
                _PriceMat=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PriceMat");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Send_KP;
        public string Send_KP
        {
            get 
            { 
				return _Send_KP; 
            }
            
            set
            {                
                _Send_KP=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Send_KP");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Dsale;
        public string Dsale
        {
            get 
            { 
				return _Dsale; 
            }
            
            set
            {                
                _Dsale=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Dsale");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc1;
        public string Desc1
        {
            get 
            { 
				return _Desc1; 
            }
            
            set
            {                
                _Desc1=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc1");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc2;
        public string Desc2
        {
            get 
            { 
				return _Desc2; 
            }
            
            set
            {                
                _Desc2=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc2");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc3;
        public string Desc3
        {
            get 
            { 
				return _Desc3; 
            }
            
            set
            {                
                _Desc3=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc3");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc4;
        public string Desc4
        {
            get 
            { 
				return _Desc4; 
            }
            
            set
            {                
                _Desc4=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc4");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc5;
        public string Desc5
        {
            get 
            { 
				return _Desc5; 
            }
            
            set
            {                
                _Desc5=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc5");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc6;
        public string Desc6
        {
            get 
            { 
				return _Desc6; 
            }
            
            set
            {                
                _Desc6=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc6");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc7;
        public string Desc7
        {
            get 
            { 
				return _Desc7; 
            }
            
            set
            {                
                _Desc7=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc7");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc8;
        public string Desc8
        {
            get 
            { 
				return _Desc8; 
            }
            
            set
            {                
                _Desc8=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc8");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc9;
        public string Desc9
        {
            get 
            { 
				return _Desc9; 
            }
            
            set
            {                
                _Desc9=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc9");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc10;
        public string Desc10
        {
            get 
            { 
				return _Desc10; 
            }
            
            set
            {                
                _Desc10=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc10");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc11;
        public string Desc11
        {
            get 
            { 
				return _Desc11; 
            }
            
            set
            {                
                _Desc11=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc11");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc12;
        public string Desc12
        {
            get 
            { 
				return _Desc12; 
            }
            
            set
            {                
                _Desc12=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc12");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<Department>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<Department, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region DeptHourlyReportXD Class
	   
    /// <summary>
    /// A class which represents the DeptHourlyReportXD table in the PBM Database.
    /// </summary>
    public partial class DeptHourlyReportXD: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<DeptHourlyReportXD> TestItems;
        static TestRepository<DeptHourlyReportXD> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<DeptHourlyReportXD>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<DeptHourlyReportXD> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(DeptHourlyReportXD item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                DeptHourlyReportXD item=new DeptHourlyReportXD();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<DeptHourlyReportXD> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public DeptHourlyReportXD(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                DeptHourlyReportXD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DeptHourlyReportXD>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public DeptHourlyReportXD()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public DeptHourlyReportXD(Expression<Func<DeptHourlyReportXD, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<DeptHourlyReportXD> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<DeptHourlyReportXD> _repo;
            
            if(db.TestMode)
            {
                DeptHourlyReportXD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DeptHourlyReportXD>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<DeptHourlyReportXD> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static DeptHourlyReportXD SingleOrDefault(Expression<Func<DeptHourlyReportXD, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<DeptHourlyReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<DeptHourlyReportXD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static DeptHourlyReportXD SingleOrDefault(Expression<Func<DeptHourlyReportXD, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<DeptHourlyReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<DeptHourlyReportXD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<DeptHourlyReportXD, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<DeptHourlyReportXD, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<DeptHourlyReportXD> Find(Expression<Func<DeptHourlyReportXD, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<DeptHourlyReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<DeptHourlyReportXD>();
        }
        
        public static IList<DeptHourlyReportXD> Find(Expression<Func<DeptHourlyReportXD, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<DeptHourlyReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<DeptHourlyReportXD>();
        }
        
        public static IQueryable<DeptHourlyReportXD> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<DeptHourlyReportXD> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<DeptHourlyReportXD> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<DeptHourlyReportXD> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<DeptHourlyReportXD> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<DeptHourlyReportXD> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iNo.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(DeptHourlyReportXD))
            {
                DeptHourlyReportXD compare=(DeptHourlyReportXD)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iNo.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iNo";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iNo";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iNo;
        public string iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iHour;
        public string iHour
        {
            get 
            { 
				return _iHour; 
            }
            
            set
            {                
                _iHour=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iHour");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDesc;
        public string iDesc
        {
            get 
            { 
				return _iDesc; 
            }
            
            set
            {                
                _iDesc=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDesc");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<DeptHourlyReportXD>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<DeptHourlyReportXD, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region DeptHourlyReportZD Class
	   
    /// <summary>
    /// A class which represents the DeptHourlyReportZD table in the PBM Database.
    /// </summary>
    public partial class DeptHourlyReportZD: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<DeptHourlyReportZD> TestItems;
        static TestRepository<DeptHourlyReportZD> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<DeptHourlyReportZD>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<DeptHourlyReportZD> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(DeptHourlyReportZD item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                DeptHourlyReportZD item=new DeptHourlyReportZD();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<DeptHourlyReportZD> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public DeptHourlyReportZD(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                DeptHourlyReportZD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DeptHourlyReportZD>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public DeptHourlyReportZD()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public DeptHourlyReportZD(Expression<Func<DeptHourlyReportZD, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<DeptHourlyReportZD> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<DeptHourlyReportZD> _repo;
            
            if(db.TestMode)
            {
                DeptHourlyReportZD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DeptHourlyReportZD>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<DeptHourlyReportZD> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static DeptHourlyReportZD SingleOrDefault(Expression<Func<DeptHourlyReportZD, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<DeptHourlyReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<DeptHourlyReportZD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static DeptHourlyReportZD SingleOrDefault(Expression<Func<DeptHourlyReportZD, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<DeptHourlyReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<DeptHourlyReportZD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<DeptHourlyReportZD, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<DeptHourlyReportZD, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<DeptHourlyReportZD> Find(Expression<Func<DeptHourlyReportZD, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<DeptHourlyReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<DeptHourlyReportZD>();
        }
        
        public static IList<DeptHourlyReportZD> Find(Expression<Func<DeptHourlyReportZD, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<DeptHourlyReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<DeptHourlyReportZD>();
        }
        
        public static IQueryable<DeptHourlyReportZD> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<DeptHourlyReportZD> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<DeptHourlyReportZD> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<DeptHourlyReportZD> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<DeptHourlyReportZD> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<DeptHourlyReportZD> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iNo.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(DeptHourlyReportZD))
            {
                DeptHourlyReportZD compare=(DeptHourlyReportZD)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iNo.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iNo";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iNo";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iNo;
        public string iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iHour;
        public string iHour
        {
            get 
            { 
				return _iHour; 
            }
            
            set
            {                
                _iHour=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iHour");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDesc;
        public string iDesc
        {
            get 
            { 
				return _iDesc; 
            }
            
            set
            {                
                _iDesc=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDesc");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<DeptHourlyReportZD>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<DeptHourlyReportZD, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region DeptReportXD Class
	   
    /// <summary>
    /// A class which represents the DeptReportXD table in the PBM Database.
    /// </summary>
    public partial class DeptReportXD: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<DeptReportXD> TestItems;
        static TestRepository<DeptReportXD> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<DeptReportXD>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<DeptReportXD> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(DeptReportXD item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                DeptReportXD item=new DeptReportXD();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<DeptReportXD> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public DeptReportXD(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                DeptReportXD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DeptReportXD>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public DeptReportXD()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public DeptReportXD(Expression<Func<DeptReportXD, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<DeptReportXD> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<DeptReportXD> _repo;
            
            if(db.TestMode)
            {
                DeptReportXD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DeptReportXD>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<DeptReportXD> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static DeptReportXD SingleOrDefault(Expression<Func<DeptReportXD, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<DeptReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<DeptReportXD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static DeptReportXD SingleOrDefault(Expression<Func<DeptReportXD, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<DeptReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<DeptReportXD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<DeptReportXD, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<DeptReportXD, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<DeptReportXD> Find(Expression<Func<DeptReportXD, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<DeptReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<DeptReportXD>();
        }
        
        public static IList<DeptReportXD> Find(Expression<Func<DeptReportXD, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<DeptReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<DeptReportXD>();
        }
        
        public static IQueryable<DeptReportXD> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<DeptReportXD> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<DeptReportXD> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<DeptReportXD> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<DeptReportXD> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<DeptReportXD> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iDesc.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(DeptReportXD))
            {
                DeptReportXD compare=(DeptReportXD)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iDesc.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iDesc";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iDesc";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDesc;
        public string iDesc
        {
            get 
            { 
				return _iDesc; 
            }
            
            set
            {                
                _iDesc=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDesc");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<DeptReportXD>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<DeptReportXD, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region DeptReportXP Class
	   
    /// <summary>
    /// A class which represents the DeptReportXP table in the PBM Database.
    /// </summary>
    public partial class DeptReportXP: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<DeptReportXP> TestItems;
        static TestRepository<DeptReportXP> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<DeptReportXP>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<DeptReportXP> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(DeptReportXP item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                DeptReportXP item=new DeptReportXP();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<DeptReportXP> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public DeptReportXP(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                DeptReportXP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DeptReportXP>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public DeptReportXP()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public DeptReportXP(Expression<Func<DeptReportXP, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<DeptReportXP> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<DeptReportXP> _repo;
            
            if(db.TestMode)
            {
                DeptReportXP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DeptReportXP>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<DeptReportXP> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static DeptReportXP SingleOrDefault(Expression<Func<DeptReportXP, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<DeptReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<DeptReportXP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static DeptReportXP SingleOrDefault(Expression<Func<DeptReportXP, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<DeptReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<DeptReportXP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<DeptReportXP, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<DeptReportXP, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<DeptReportXP> Find(Expression<Func<DeptReportXP, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<DeptReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<DeptReportXP>();
        }
        
        public static IList<DeptReportXP> Find(Expression<Func<DeptReportXP, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<DeptReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<DeptReportXP>();
        }
        
        public static IQueryable<DeptReportXP> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<DeptReportXP> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<DeptReportXP> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<DeptReportXP> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<DeptReportXP> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<DeptReportXP> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iDesc.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(DeptReportXP))
            {
                DeptReportXP compare=(DeptReportXP)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iDesc.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iDesc";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iDesc";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDesc;
        public string iDesc
        {
            get 
            { 
				return _iDesc; 
            }
            
            set
            {                
                _iDesc=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDesc");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<DeptReportXP>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<DeptReportXP, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region DeptReportZD Class
	   
    /// <summary>
    /// A class which represents the DeptReportZD table in the PBM Database.
    /// </summary>
    public partial class DeptReportZD: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<DeptReportZD> TestItems;
        static TestRepository<DeptReportZD> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<DeptReportZD>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<DeptReportZD> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(DeptReportZD item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                DeptReportZD item=new DeptReportZD();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<DeptReportZD> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public DeptReportZD(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                DeptReportZD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DeptReportZD>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public DeptReportZD()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public DeptReportZD(Expression<Func<DeptReportZD, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<DeptReportZD> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<DeptReportZD> _repo;
            
            if(db.TestMode)
            {
                DeptReportZD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DeptReportZD>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<DeptReportZD> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static DeptReportZD SingleOrDefault(Expression<Func<DeptReportZD, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<DeptReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<DeptReportZD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static DeptReportZD SingleOrDefault(Expression<Func<DeptReportZD, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<DeptReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<DeptReportZD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<DeptReportZD, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<DeptReportZD, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<DeptReportZD> Find(Expression<Func<DeptReportZD, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<DeptReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<DeptReportZD>();
        }
        
        public static IList<DeptReportZD> Find(Expression<Func<DeptReportZD, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<DeptReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<DeptReportZD>();
        }
        
        public static IQueryable<DeptReportZD> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<DeptReportZD> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<DeptReportZD> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<DeptReportZD> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<DeptReportZD> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<DeptReportZD> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iDesc.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(DeptReportZD))
            {
                DeptReportZD compare=(DeptReportZD)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iDesc.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iDesc";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iDesc";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDesc;
        public string iDesc
        {
            get 
            { 
				return _iDesc; 
            }
            
            set
            {                
                _iDesc=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDesc");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<DeptReportZD>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<DeptReportZD, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region DeptReportZP Class
	   
    /// <summary>
    /// A class which represents the DeptReportZP table in the PBM Database.
    /// </summary>
    public partial class DeptReportZP: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<DeptReportZP> TestItems;
        static TestRepository<DeptReportZP> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<DeptReportZP>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<DeptReportZP> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(DeptReportZP item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                DeptReportZP item=new DeptReportZP();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<DeptReportZP> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public DeptReportZP(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                DeptReportZP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DeptReportZP>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public DeptReportZP()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public DeptReportZP(Expression<Func<DeptReportZP, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<DeptReportZP> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<DeptReportZP> _repo;
            
            if(db.TestMode)
            {
                DeptReportZP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DeptReportZP>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<DeptReportZP> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static DeptReportZP SingleOrDefault(Expression<Func<DeptReportZP, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<DeptReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<DeptReportZP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static DeptReportZP SingleOrDefault(Expression<Func<DeptReportZP, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<DeptReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<DeptReportZP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<DeptReportZP, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<DeptReportZP, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<DeptReportZP> Find(Expression<Func<DeptReportZP, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<DeptReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<DeptReportZP>();
        }
        
        public static IList<DeptReportZP> Find(Expression<Func<DeptReportZP, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<DeptReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<DeptReportZP>();
        }
        
        public static IQueryable<DeptReportZP> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<DeptReportZP> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<DeptReportZP> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<DeptReportZP> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<DeptReportZP> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<DeptReportZP> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iDesc.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(DeptReportZP))
            {
                DeptReportZP compare=(DeptReportZP)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iDesc.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iDesc";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iDesc";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDesc;
        public string iDesc
        {
            get 
            { 
				return _iDesc; 
            }
            
            set
            {                
                _iDesc=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDesc");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<DeptReportZP>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<DeptReportZP, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region Discount Class
	   
    /// <summary>
    /// A class which represents the Discount table in the PBM Database.
    /// </summary>
    public partial class Discount: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<Discount> TestItems;
        static TestRepository<Discount> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<Discount>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<Discount> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(Discount item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Discount item=new Discount();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<Discount> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public Discount(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Discount.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Discount>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public Discount()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public Discount(Expression<Func<Discount, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<Discount> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<Discount> _repo;
            
            if(db.TestMode)
            {
                Discount.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Discount>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<Discount> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Discount SingleOrDefault(Expression<Func<Discount, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<Discount>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<Discount>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static Discount SingleOrDefault(Expression<Func<Discount, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<Discount>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<Discount>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<Discount, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<Discount, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<Discount> Find(Expression<Func<Discount, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<Discount>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<Discount>();
        }
        
        public static IList<Discount> Find(Expression<Func<Discount, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<Discount>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<Discount>();
        }
        
        public static IQueryable<Discount> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<Discount> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Discount> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Discount> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Discount> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<Discount> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iNo.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(Discount))
            {
                Discount compare=(Discount)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iNo.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iNo";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iNo";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iNo;
        public string iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Attribute;
        public string Attribute
        {
            get 
            { 
				return _Attribute; 
            }
            
            set
            {                
                _Attribute=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Attribute");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _status;
        public string status
        {
            get 
            { 
				return _status; 
            }
            
            set
            {                
                _status=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="status");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Rate;
        public string Rate
        {
            get 
            { 
				return _Rate; 
            }
            
            set
            {                
                _Rate=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Rate");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDescription;
        public string iDescription
        {
            get 
            { 
				return _iDescription; 
            }
            
            set
            {                
                _iDescription=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDescription");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc1;
        public string Desc1
        {
            get 
            { 
				return _Desc1; 
            }
            
            set
            {                
                _Desc1=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc1");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc2;
        public string Desc2
        {
            get 
            { 
				return _Desc2; 
            }
            
            set
            {                
                _Desc2=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc2");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc3;
        public string Desc3
        {
            get 
            { 
				return _Desc3; 
            }
            
            set
            {                
                _Desc3=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc3");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc4;
        public string Desc4
        {
            get 
            { 
				return _Desc4; 
            }
            
            set
            {                
                _Desc4=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc4");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc5;
        public string Desc5
        {
            get 
            { 
				return _Desc5; 
            }
            
            set
            {                
                _Desc5=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc5");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc6;
        public string Desc6
        {
            get 
            { 
				return _Desc6; 
            }
            
            set
            {                
                _Desc6=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc6");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc7;
        public string Desc7
        {
            get 
            { 
				return _Desc7; 
            }
            
            set
            {                
                _Desc7=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc7");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc8;
        public string Desc8
        {
            get 
            { 
				return _Desc8; 
            }
            
            set
            {                
                _Desc8=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc8");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc9;
        public string Desc9
        {
            get 
            { 
				return _Desc9; 
            }
            
            set
            {                
                _Desc9=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc9");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc10;
        public string Desc10
        {
            get 
            { 
				return _Desc10; 
            }
            
            set
            {                
                _Desc10=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc10");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc11;
        public string Desc11
        {
            get 
            { 
				return _Desc11; 
            }
            
            set
            {                
                _Desc11=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc11");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc12;
        public string Desc12
        {
            get 
            { 
				return _Desc12; 
            }
            
            set
            {                
                _Desc12=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc12");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<Discount>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<Discount, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region DPLU Class
	   
    /// <summary>
    /// A class which represents the DPLU table in the PBM Database.
    /// </summary>
    public partial class DPLU: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<DPLU> TestItems;
        static TestRepository<DPLU> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<DPLU>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<DPLU> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(DPLU item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                DPLU item=new DPLU();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<DPLU> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public DPLU(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                DPLU.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DPLU>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public DPLU()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public DPLU(Expression<Func<DPLU, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<DPLU> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<DPLU> _repo;
            
            if(db.TestMode)
            {
                DPLU.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<DPLU>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<DPLU> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static DPLU SingleOrDefault(Expression<Func<DPLU, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<DPLU>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<DPLU>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static DPLU SingleOrDefault(Expression<Func<DPLU, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<DPLU>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<DPLU>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<DPLU, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<DPLU, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<DPLU> Find(Expression<Func<DPLU, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<DPLU>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<DPLU>();
        }
        
        public static IList<DPLU> Find(Expression<Func<DPLU, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<DPLU>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<DPLU>();
        }
        
        public static IQueryable<DPLU> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<DPLU> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<DPLU> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<DPLU> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<DPLU> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<DPLU> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iNo.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(DPLU))
            {
                DPLU compare=(DPLU)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iNo.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iNo";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iNo";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iNo;
        public string iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Barcode;
        public string Barcode
        {
            get 
            { 
				return _Barcode; 
            }
            
            set
            {                
                _Barcode=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Barcode");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<DPLU>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<DPLU, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region EJReport Class
	   
    /// <summary>
    /// A class which represents the EJReport table in the PBM Database.
    /// </summary>
    public partial class EJReport: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<EJReport> TestItems;
        static TestRepository<EJReport> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<EJReport>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<EJReport> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(EJReport item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                EJReport item=new EJReport();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<EJReport> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public EJReport(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                EJReport.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<EJReport>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public EJReport()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public EJReport(Expression<Func<EJReport, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<EJReport> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<EJReport> _repo;
            
            if(db.TestMode)
            {
                EJReport.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<EJReport>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<EJReport> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static EJReport SingleOrDefault(Expression<Func<EJReport, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<EJReport>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<EJReport>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static EJReport SingleOrDefault(Expression<Func<EJReport, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<EJReport>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<EJReport>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<EJReport, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<EJReport, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<EJReport> Find(Expression<Func<EJReport, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<EJReport>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<EJReport>();
        }
        
        public static IList<EJReport> Find(Expression<Func<EJReport, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<EJReport>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<EJReport>();
        }
        
        public static IQueryable<EJReport> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<EJReport> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<EJReport> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<EJReport> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<EJReport> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<EJReport> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(EJReport))
            {
                EJReport compare=(EJReport)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<EJReport>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<EJReport, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region FTPflag Class
	   
    /// <summary>
    /// A class which represents the FTPflag table in the PBM Database.
    /// </summary>
    public partial class FTPflag: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<FTPflag> TestItems;
        static TestRepository<FTPflag> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<FTPflag>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<FTPflag> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(FTPflag item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                FTPflag item=new FTPflag();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<FTPflag> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public FTPflag(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                FTPflag.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<FTPflag>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public FTPflag()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public FTPflag(Expression<Func<FTPflag, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<FTPflag> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<FTPflag> _repo;
            
            if(db.TestMode)
            {
                FTPflag.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<FTPflag>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<FTPflag> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static FTPflag SingleOrDefault(Expression<Func<FTPflag, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<FTPflag>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<FTPflag>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static FTPflag SingleOrDefault(Expression<Func<FTPflag, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<FTPflag>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<FTPflag>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<FTPflag, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<FTPflag, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<FTPflag> Find(Expression<Func<FTPflag, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<FTPflag>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<FTPflag>();
        }
        
        public static IList<FTPflag> Find(Expression<Func<FTPflag, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<FTPflag>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<FTPflag>();
        }
        
        public static IQueryable<FTPflag> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<FTPflag> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<FTPflag> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<FTPflag> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<FTPflag> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<FTPflag> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iip";
        }

        public object KeyValue()
        {
            return this.iip;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iip.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(FTPflag))
            {
                FTPflag compare=(FTPflag)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iip.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iip";
        }
        
        public static string GetKeyColumn()
        {
            return "iip";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iip";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iip;
        public string iip
        {
            get 
            { 
				return _iip; 
            }
            
            set
            {                
                _iip=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iip");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iuser;
        public string iuser
        {
            get 
            { 
				return _iuser; 
            }
            
            set
            {                
                _iuser=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iuser");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _ipassword;
        public string ipassword
        {
            get 
            { 
				return _ipassword; 
            }
            
            set
            {                
                _ipassword=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ipassword");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<FTPflag>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<FTPflag, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region HourlyReportX Class
	   
    /// <summary>
    /// A class which represents the HourlyReportX table in the PBM Database.
    /// </summary>
    public partial class HourlyReportX: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<HourlyReportX> TestItems;
        static TestRepository<HourlyReportX> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<HourlyReportX>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<HourlyReportX> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(HourlyReportX item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                HourlyReportX item=new HourlyReportX();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<HourlyReportX> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public HourlyReportX(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                HourlyReportX.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<HourlyReportX>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public HourlyReportX()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public HourlyReportX(Expression<Func<HourlyReportX, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<HourlyReportX> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<HourlyReportX> _repo;
            
            if(db.TestMode)
            {
                HourlyReportX.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<HourlyReportX>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<HourlyReportX> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static HourlyReportX SingleOrDefault(Expression<Func<HourlyReportX, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<HourlyReportX>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<HourlyReportX>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static HourlyReportX SingleOrDefault(Expression<Func<HourlyReportX, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<HourlyReportX>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<HourlyReportX>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<HourlyReportX, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<HourlyReportX, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<HourlyReportX> Find(Expression<Func<HourlyReportX, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<HourlyReportX>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<HourlyReportX>();
        }
        
        public static IList<HourlyReportX> Find(Expression<Func<HourlyReportX, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<HourlyReportX>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<HourlyReportX>();
        }
        
        public static IQueryable<HourlyReportX> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<HourlyReportX> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<HourlyReportX> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<HourlyReportX> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<HourlyReportX> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<HourlyReportX> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(HourlyReportX))
            {
                HourlyReportX compare=(HourlyReportX)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<HourlyReportX>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<HourlyReportX, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region HourlyReportZ Class
	   
    /// <summary>
    /// A class which represents the HourlyReportZ table in the PBM Database.
    /// </summary>
    public partial class HourlyReportZ: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<HourlyReportZ> TestItems;
        static TestRepository<HourlyReportZ> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<HourlyReportZ>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<HourlyReportZ> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(HourlyReportZ item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                HourlyReportZ item=new HourlyReportZ();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<HourlyReportZ> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public HourlyReportZ(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                HourlyReportZ.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<HourlyReportZ>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public HourlyReportZ()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public HourlyReportZ(Expression<Func<HourlyReportZ, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<HourlyReportZ> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<HourlyReportZ> _repo;
            
            if(db.TestMode)
            {
                HourlyReportZ.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<HourlyReportZ>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<HourlyReportZ> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static HourlyReportZ SingleOrDefault(Expression<Func<HourlyReportZ, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<HourlyReportZ>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<HourlyReportZ>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static HourlyReportZ SingleOrDefault(Expression<Func<HourlyReportZ, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<HourlyReportZ>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<HourlyReportZ>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<HourlyReportZ, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<HourlyReportZ, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<HourlyReportZ> Find(Expression<Func<HourlyReportZ, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<HourlyReportZ>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<HourlyReportZ>();
        }
        
        public static IList<HourlyReportZ> Find(Expression<Func<HourlyReportZ, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<HourlyReportZ>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<HourlyReportZ>();
        }
        
        public static IQueryable<HourlyReportZ> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<HourlyReportZ> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<HourlyReportZ> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<HourlyReportZ> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<HourlyReportZ> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<HourlyReportZ> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(HourlyReportZ))
            {
                HourlyReportZ compare=(HourlyReportZ)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<HourlyReportZ>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<HourlyReportZ, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region KeyBoard Class
	   
    /// <summary>
    /// A class which represents the KeyBoard table in the PBM Database.
    /// </summary>
    public partial class KeyBoard: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<KeyBoard> TestItems;
        static TestRepository<KeyBoard> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<KeyBoard>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<KeyBoard> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(KeyBoard item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                KeyBoard item=new KeyBoard();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<KeyBoard> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public KeyBoard(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                KeyBoard.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<KeyBoard>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public KeyBoard()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public KeyBoard(Expression<Func<KeyBoard, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<KeyBoard> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<KeyBoard> _repo;
            
            if(db.TestMode)
            {
                KeyBoard.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<KeyBoard>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<KeyBoard> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static KeyBoard SingleOrDefault(Expression<Func<KeyBoard, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<KeyBoard>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<KeyBoard>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static KeyBoard SingleOrDefault(Expression<Func<KeyBoard, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<KeyBoard>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<KeyBoard>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<KeyBoard, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<KeyBoard, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<KeyBoard> Find(Expression<Func<KeyBoard, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<KeyBoard>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<KeyBoard>();
        }
        
        public static IList<KeyBoard> Find(Expression<Func<KeyBoard, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<KeyBoard>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<KeyBoard>();
        }
        
        public static IQueryable<KeyBoard> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<KeyBoard> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<KeyBoard> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<KeyBoard> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<KeyBoard> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<KeyBoard> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "KeyNo";
        }

        public object KeyValue()
        {
            return this.KeyNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.KeyNo.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(KeyBoard))
            {
                KeyBoard compare=(KeyBoard)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.KeyNo.ToString();
        }

        public string DescriptorColumn() 
        {
            return "KeyNo";
        }
        
        public static string GetKeyColumn()
        {
            return "KeyNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "KeyNo";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _KeyNo;
        public string KeyNo
        {
            get 
            { 
				return _KeyNo; 
            }
            
            set
            {                
                _KeyNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="KeyNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _KeyCodeF0;
        public long? KeyCodeF0
        {
            get 
            { 
				return _KeyCodeF0; 
            }
            
            set
            {                
                _KeyCodeF0=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="KeyCodeF0");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _KeyCodeF1;
        public long? KeyCodeF1
        {
            get 
            { 
				return _KeyCodeF1; 
            }
            
            set
            {                
                _KeyCodeF1=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="KeyCodeF1");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _KeyCodeF2;
        public long? KeyCodeF2
        {
            get 
            { 
				return _KeyCodeF2; 
            }
            
            set
            {                
                _KeyCodeF2=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="KeyCodeF2");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _KeyCodeF3;
        public long? KeyCodeF3
        {
            get 
            { 
				return _KeyCodeF3; 
            }
            
            set
            {                
                _KeyCodeF3=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="KeyCodeF3");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _KeySize;
        public string KeySize
        {
            get 
            { 
				return _KeySize; 
            }
            
            set
            {                
                _KeySize=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="KeySize");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<KeyBoard>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<KeyBoard, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region KPFlag Class
	   
    /// <summary>
    /// A class which represents the KPFlag table in the PBM Database.
    /// </summary>
    public partial class KPFlag: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<KPFlag> TestItems;
        static TestRepository<KPFlag> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<KPFlag>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<KPFlag> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(KPFlag item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                KPFlag item=new KPFlag();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<KPFlag> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public KPFlag(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                KPFlag.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<KPFlag>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public KPFlag()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public KPFlag(Expression<Func<KPFlag, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<KPFlag> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<KPFlag> _repo;
            
            if(db.TestMode)
            {
                KPFlag.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<KPFlag>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<KPFlag> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static KPFlag SingleOrDefault(Expression<Func<KPFlag, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<KPFlag>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<KPFlag>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static KPFlag SingleOrDefault(Expression<Func<KPFlag, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<KPFlag>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<KPFlag>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<KPFlag, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<KPFlag, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<KPFlag> Find(Expression<Func<KPFlag, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<KPFlag>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<KPFlag>();
        }
        
        public static IList<KPFlag> Find(Expression<Func<KPFlag, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<KPFlag>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<KPFlag>();
        }
        
        public static IQueryable<KPFlag> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<KPFlag> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<KPFlag> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<KPFlag> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<KPFlag> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<KPFlag> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iName";
        }

        public object KeyValue()
        {
            return this.iName;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(KPFlag))
            {
                KPFlag compare=(KPFlag)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iName";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _itype;
        public string itype
        {
            get 
            { 
				return _itype; 
            }
            
            set
            {                
                _itype=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="itype");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iIp;
        public string iIp
        {
            get 
            { 
				return _iIp; 
            }
            
            set
            {                
                _iIp=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iIp");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iport;
        public string iport
        {
            get 
            { 
				return _iport; 
            }
            
            set
            {                
                _iport=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iport");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<KPFlag>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<KPFlag, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region Lang Class
	   
    /// <summary>
    /// A class which represents the Lang table in the PBM Database.
    /// </summary>
    public partial class Lang: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<Lang> TestItems;
        static TestRepository<Lang> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<Lang>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<Lang> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(Lang item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Lang item=new Lang();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<Lang> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public Lang(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Lang.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Lang>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public Lang()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public Lang(Expression<Func<Lang, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<Lang> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<Lang> _repo;
            
            if(db.TestMode)
            {
                Lang.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Lang>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<Lang> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Lang SingleOrDefault(Expression<Func<Lang, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<Lang>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<Lang>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static Lang SingleOrDefault(Expression<Func<Lang, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<Lang>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<Lang>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<Lang, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<Lang, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<Lang> Find(Expression<Func<Lang, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<Lang>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<Lang>();
        }
        
        public static IList<Lang> Find(Expression<Func<Lang, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<Lang>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<Lang>();
        }
        
        public static IQueryable<Lang> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<Lang> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Lang> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Lang> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Lang> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<Lang> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.language.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(Lang))
            {
                Lang compare=(Lang)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.language.ToString();
        }

        public string DescriptorColumn() 
        {
            return "language";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "language";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long _iNo;
        public long iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _language;
        public string language
        {
            get 
            { 
				return _language; 
            }
            
            set
            {                
                _language=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="language");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _MsgPath;
        public string MsgPath
        {
            get 
            { 
				return _MsgPath; 
            }
            
            set
            {                
                _MsgPath=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MsgPath");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _FacePath;
        public string FacePath
        {
            get 
            { 
				return _FacePath; 
            }
            
            set
            {                
                _FacePath=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FacePath");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _current;
        public string current
        {
            get 
            { 
				return _current; 
            }
            
            set
            {                
                _current=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="current");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<Lang>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<Lang, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region LogoText Class
	   
    /// <summary>
    /// A class which represents the LogoText table in the PBM Database.
    /// </summary>
    public partial class LogoText: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<LogoText> TestItems;
        static TestRepository<LogoText> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<LogoText>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<LogoText> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(LogoText item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                LogoText item=new LogoText();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<LogoText> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public LogoText(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                LogoText.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<LogoText>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public LogoText()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public LogoText(Expression<Func<LogoText, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<LogoText> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<LogoText> _repo;
            
            if(db.TestMode)
            {
                LogoText.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<LogoText>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<LogoText> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static LogoText SingleOrDefault(Expression<Func<LogoText, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<LogoText>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<LogoText>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static LogoText SingleOrDefault(Expression<Func<LogoText, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<LogoText>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<LogoText>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<LogoText, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<LogoText, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<LogoText> Find(Expression<Func<LogoText, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<LogoText>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<LogoText>();
        }
        
        public static IList<LogoText> Find(Expression<Func<LogoText, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<LogoText>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<LogoText>();
        }
        
        public static IQueryable<LogoText> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<LogoText> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<LogoText> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<LogoText> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<LogoText> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<LogoText> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iLine";
        }

        public object KeyValue()
        {
            return this.iLine;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.Txt1.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(LogoText))
            {
                LogoText compare=(LogoText)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.Txt1.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Txt1";
        }
        
        public static string GetKeyColumn()
        {
            return "iLine";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "Txt1";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long _iLine;
        public long iLine
        {
            get 
            { 
				return _iLine; 
            }
            
            set
            {                
                _iLine=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iLine");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt1;
        public string Txt1
        {
            get 
            { 
				return _Txt1; 
            }
            
            set
            {                
                _Txt1=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt1");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt2;
        public string Txt2
        {
            get 
            { 
				return _Txt2; 
            }
            
            set
            {                
                _Txt2=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt2");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt3;
        public string Txt3
        {
            get 
            { 
				return _Txt3; 
            }
            
            set
            {                
                _Txt3=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt3");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt4;
        public string Txt4
        {
            get 
            { 
				return _Txt4; 
            }
            
            set
            {                
                _Txt4=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt4");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt5;
        public string Txt5
        {
            get 
            { 
				return _Txt5; 
            }
            
            set
            {                
                _Txt5=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt5");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt6;
        public string Txt6
        {
            get 
            { 
				return _Txt6; 
            }
            
            set
            {                
                _Txt6=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt6");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt7;
        public string Txt7
        {
            get 
            { 
				return _Txt7; 
            }
            
            set
            {                
                _Txt7=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt7");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt8;
        public string Txt8
        {
            get 
            { 
				return _Txt8; 
            }
            
            set
            {                
                _Txt8=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt8");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt9;
        public string Txt9
        {
            get 
            { 
				return _Txt9; 
            }
            
            set
            {                
                _Txt9=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt9");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt10;
        public string Txt10
        {
            get 
            { 
				return _Txt10; 
            }
            
            set
            {                
                _Txt10=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt10");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt11;
        public string Txt11
        {
            get 
            { 
				return _Txt11; 
            }
            
            set
            {                
                _Txt11=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt11");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt12;
        public string Txt12
        {
            get 
            { 
				return _Txt12; 
            }
            
            set
            {                
                _Txt12=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt12");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt13;
        public string Txt13
        {
            get 
            { 
				return _Txt13; 
            }
            
            set
            {                
                _Txt13=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt13");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt14;
        public string Txt14
        {
            get 
            { 
				return _Txt14; 
            }
            
            set
            {                
                _Txt14=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt14");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt15;
        public string Txt15
        {
            get 
            { 
				return _Txt15; 
            }
            
            set
            {                
                _Txt15=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt15");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt16;
        public string Txt16
        {
            get 
            { 
				return _Txt16; 
            }
            
            set
            {                
                _Txt16=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt16");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt17;
        public string Txt17
        {
            get 
            { 
				return _Txt17; 
            }
            
            set
            {                
                _Txt17=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt17");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt18;
        public string Txt18
        {
            get 
            { 
				return _Txt18; 
            }
            
            set
            {                
                _Txt18=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt18");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt19;
        public string Txt19
        {
            get 
            { 
				return _Txt19; 
            }
            
            set
            {                
                _Txt19=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt19");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Txt20;
        public string Txt20
        {
            get 
            { 
				return _Txt20; 
            }
            
            set
            {                
                _Txt20=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Txt20");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<LogoText>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<LogoText, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region MallDef Class
	   
    /// <summary>
    /// A class which represents the MallDef table in the PBM Database.
    /// </summary>
    public partial class MallDef: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<MallDef> TestItems;
        static TestRepository<MallDef> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<MallDef>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<MallDef> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(MallDef item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                MallDef item=new MallDef();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<MallDef> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public MallDef(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                MallDef.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MallDef>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public MallDef()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public MallDef(Expression<Func<MallDef, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<MallDef> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<MallDef> _repo;
            
            if(db.TestMode)
            {
                MallDef.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MallDef>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<MallDef> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static MallDef SingleOrDefault(Expression<Func<MallDef, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<MallDef>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<MallDef>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static MallDef SingleOrDefault(Expression<Func<MallDef, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<MallDef>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<MallDef>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<MallDef, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<MallDef, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<MallDef> Find(Expression<Func<MallDef, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<MallDef>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<MallDef>();
        }
        
        public static IList<MallDef> Find(Expression<Func<MallDef, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<MallDef>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<MallDef>();
        }
        
        public static IQueryable<MallDef> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<MallDef> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MallDef> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MallDef> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MallDef> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<MallDef> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "MallName";
        }

        public object KeyValue()
        {
            return this.MallName;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.MallName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(MallDef))
            {
                MallDef compare=(MallDef)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.MallName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "MallName";
        }
        
        public static string GetKeyColumn()
        {
            return "MallName";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "MallName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _MallName;
        public string MallName
        {
            get 
            { 
				return _MallName; 
            }
            
            set
            {                
                _MallName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MallName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _MallCode;
        public string MallCode
        {
            get 
            { 
				return _MallCode; 
            }
            
            set
            {                
                _MallCode=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MallCode");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _TenantCode;
        public string TenantCode
        {
            get 
            { 
				return _TenantCode; 
            }
            
            set
            {                
                _TenantCode=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TenantCode");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<MallDef>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<MallDef, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region MenuPLU Class
	   
    /// <summary>
    /// A class which represents the MenuPLU table in the PBM Database.
    /// </summary>
    public partial class MenuPLU: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<MenuPLU> TestItems;
        static TestRepository<MenuPLU> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<MenuPLU>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<MenuPLU> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(MenuPLU item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                MenuPLU item=new MenuPLU();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<MenuPLU> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public MenuPLU(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                MenuPLU.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MenuPLU>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public MenuPLU()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public MenuPLU(Expression<Func<MenuPLU, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<MenuPLU> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<MenuPLU> _repo;
            
            if(db.TestMode)
            {
                MenuPLU.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MenuPLU>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<MenuPLU> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static MenuPLU SingleOrDefault(Expression<Func<MenuPLU, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<MenuPLU>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<MenuPLU>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static MenuPLU SingleOrDefault(Expression<Func<MenuPLU, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<MenuPLU>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<MenuPLU>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<MenuPLU, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<MenuPLU, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<MenuPLU> Find(Expression<Func<MenuPLU, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<MenuPLU>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<MenuPLU>();
        }
        
        public static IList<MenuPLU> Find(Expression<Func<MenuPLU, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<MenuPLU>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<MenuPLU>();
        }
        
        public static IQueryable<MenuPLU> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<MenuPLU> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MenuPLU> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MenuPLU> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MenuPLU> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<MenuPLU> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "ino";
        }

        public object KeyValue()
        {
            return this.ino;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.ino.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(MenuPLU))
            {
                MenuPLU compare=(MenuPLU)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.ino.ToString();
        }

        public string DescriptorColumn() 
        {
            return "ino";
        }
        
        public static string GetKeyColumn()
        {
            return "ino";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "ino";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _ino;
        public string ino
        {
            get 
            { 
				return _ino; 
            }
            
            set
            {                
                _ino=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ino");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _price;
        public string price
        {
            get 
            { 
				return _price; 
            }
            
            set
            {                
                _price=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="price");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _mode;
        public string mode
        {
            get 
            { 
				return _mode; 
            }
            
            set
            {                
                _mode=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="mode");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Vat;
        public string Vat
        {
            get 
            { 
				return _Vat; 
            }
            
            set
            {                
                _Vat=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Vat");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _desc0;
        public string desc0
        {
            get 
            { 
				return _desc0; 
            }
            
            set
            {                
                _desc0=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="desc0");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _desc1;
        public string desc1
        {
            get 
            { 
				return _desc1; 
            }
            
            set
            {                
                _desc1=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="desc1");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _desc2;
        public string desc2
        {
            get 
            { 
				return _desc2; 
            }
            
            set
            {                
                _desc2=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="desc2");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _desc3;
        public string desc3
        {
            get 
            { 
				return _desc3; 
            }
            
            set
            {                
                _desc3=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="desc3");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _desc4;
        public string desc4
        {
            get 
            { 
				return _desc4; 
            }
            
            set
            {                
                _desc4=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="desc4");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _desc5;
        public string desc5
        {
            get 
            { 
				return _desc5; 
            }
            
            set
            {                
                _desc5=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="desc5");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _desc6;
        public string desc6
        {
            get 
            { 
				return _desc6; 
            }
            
            set
            {                
                _desc6=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="desc6");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _desc7;
        public string desc7
        {
            get 
            { 
				return _desc7; 
            }
            
            set
            {                
                _desc7=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="desc7");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _desc8;
        public string desc8
        {
            get 
            { 
				return _desc8; 
            }
            
            set
            {                
                _desc8=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="desc8");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _desc9;
        public string desc9
        {
            get 
            { 
				return _desc9; 
            }
            
            set
            {                
                _desc9=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="desc9");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _desc10;
        public string desc10
        {
            get 
            { 
				return _desc10; 
            }
            
            set
            {                
                _desc10=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="desc10");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<MenuPLU>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<MenuPLU, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region MenuPLUReportD Class
	   
    /// <summary>
    /// A class which represents the MenuPLUReportD table in the PBM Database.
    /// </summary>
    public partial class MenuPLUReportD: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<MenuPLUReportD> TestItems;
        static TestRepository<MenuPLUReportD> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<MenuPLUReportD>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<MenuPLUReportD> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(MenuPLUReportD item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                MenuPLUReportD item=new MenuPLUReportD();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<MenuPLUReportD> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public MenuPLUReportD(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                MenuPLUReportD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MenuPLUReportD>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public MenuPLUReportD()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public MenuPLUReportD(Expression<Func<MenuPLUReportD, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<MenuPLUReportD> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<MenuPLUReportD> _repo;
            
            if(db.TestMode)
            {
                MenuPLUReportD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MenuPLUReportD>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<MenuPLUReportD> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static MenuPLUReportD SingleOrDefault(Expression<Func<MenuPLUReportD, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<MenuPLUReportD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<MenuPLUReportD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static MenuPLUReportD SingleOrDefault(Expression<Func<MenuPLUReportD, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<MenuPLUReportD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<MenuPLUReportD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<MenuPLUReportD, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<MenuPLUReportD, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<MenuPLUReportD> Find(Expression<Func<MenuPLUReportD, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<MenuPLUReportD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<MenuPLUReportD>();
        }
        
        public static IList<MenuPLUReportD> Find(Expression<Func<MenuPLUReportD, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<MenuPLUReportD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<MenuPLUReportD>();
        }
        
        public static IQueryable<MenuPLUReportD> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<MenuPLUReportD> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MenuPLUReportD> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MenuPLUReportD> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MenuPLUReportD> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<MenuPLUReportD> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iCode.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(MenuPLUReportD))
            {
                MenuPLUReportD compare=(MenuPLUReportD)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iCode.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iCode";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iCode";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long _iNo;
        public long iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iCode;
        public string iCode
        {
            get 
            { 
				return _iCode; 
            }
            
            set
            {                
                _iCode=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iCode");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDesc;
        public string iDesc
        {
            get 
            { 
				return _iDesc; 
            }
            
            set
            {                
                _iDesc=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDesc");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<MenuPLUReportD>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<MenuPLUReportD, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region MenuPLUReportP Class
	   
    /// <summary>
    /// A class which represents the MenuPLUReportP table in the PBM Database.
    /// </summary>
    public partial class MenuPLUReportP: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<MenuPLUReportP> TestItems;
        static TestRepository<MenuPLUReportP> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<MenuPLUReportP>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<MenuPLUReportP> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(MenuPLUReportP item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                MenuPLUReportP item=new MenuPLUReportP();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<MenuPLUReportP> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public MenuPLUReportP(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                MenuPLUReportP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MenuPLUReportP>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public MenuPLUReportP()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public MenuPLUReportP(Expression<Func<MenuPLUReportP, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<MenuPLUReportP> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<MenuPLUReportP> _repo;
            
            if(db.TestMode)
            {
                MenuPLUReportP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MenuPLUReportP>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<MenuPLUReportP> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static MenuPLUReportP SingleOrDefault(Expression<Func<MenuPLUReportP, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<MenuPLUReportP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<MenuPLUReportP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static MenuPLUReportP SingleOrDefault(Expression<Func<MenuPLUReportP, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<MenuPLUReportP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<MenuPLUReportP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<MenuPLUReportP, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<MenuPLUReportP, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<MenuPLUReportP> Find(Expression<Func<MenuPLUReportP, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<MenuPLUReportP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<MenuPLUReportP>();
        }
        
        public static IList<MenuPLUReportP> Find(Expression<Func<MenuPLUReportP, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<MenuPLUReportP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<MenuPLUReportP>();
        }
        
        public static IQueryable<MenuPLUReportP> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<MenuPLUReportP> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MenuPLUReportP> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MenuPLUReportP> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MenuPLUReportP> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<MenuPLUReportP> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iCode.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(MenuPLUReportP))
            {
                MenuPLUReportP compare=(MenuPLUReportP)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iCode.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iCode";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iCode";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long _iNo;
        public long iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iCode;
        public string iCode
        {
            get 
            { 
				return _iCode; 
            }
            
            set
            {                
                _iCode=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iCode");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDesc;
        public string iDesc
        {
            get 
            { 
				return _iDesc; 
            }
            
            set
            {                
                _iDesc=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDesc");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<MenuPLUReportP>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<MenuPLUReportP, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region MenuReportXD Class
	   
    /// <summary>
    /// A class which represents the MenuReportXD table in the PBM Database.
    /// </summary>
    public partial class MenuReportXD: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<MenuReportXD> TestItems;
        static TestRepository<MenuReportXD> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<MenuReportXD>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<MenuReportXD> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(MenuReportXD item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                MenuReportXD item=new MenuReportXD();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<MenuReportXD> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public MenuReportXD(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                MenuReportXD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MenuReportXD>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public MenuReportXD()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public MenuReportXD(Expression<Func<MenuReportXD, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<MenuReportXD> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<MenuReportXD> _repo;
            
            if(db.TestMode)
            {
                MenuReportXD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MenuReportXD>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<MenuReportXD> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static MenuReportXD SingleOrDefault(Expression<Func<MenuReportXD, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<MenuReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<MenuReportXD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static MenuReportXD SingleOrDefault(Expression<Func<MenuReportXD, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<MenuReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<MenuReportXD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<MenuReportXD, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<MenuReportXD, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<MenuReportXD> Find(Expression<Func<MenuReportXD, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<MenuReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<MenuReportXD>();
        }
        
        public static IList<MenuReportXD> Find(Expression<Func<MenuReportXD, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<MenuReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<MenuReportXD>();
        }
        
        public static IQueryable<MenuReportXD> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<MenuReportXD> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MenuReportXD> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MenuReportXD> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MenuReportXD> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<MenuReportXD> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(MenuReportXD))
            {
                MenuReportXD compare=(MenuReportXD)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<MenuReportXD>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<MenuReportXD, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region MenuReportXP Class
	   
    /// <summary>
    /// A class which represents the MenuReportXP table in the PBM Database.
    /// </summary>
    public partial class MenuReportXP: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<MenuReportXP> TestItems;
        static TestRepository<MenuReportXP> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<MenuReportXP>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<MenuReportXP> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(MenuReportXP item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                MenuReportXP item=new MenuReportXP();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<MenuReportXP> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public MenuReportXP(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                MenuReportXP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MenuReportXP>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public MenuReportXP()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public MenuReportXP(Expression<Func<MenuReportXP, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<MenuReportXP> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<MenuReportXP> _repo;
            
            if(db.TestMode)
            {
                MenuReportXP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MenuReportXP>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<MenuReportXP> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static MenuReportXP SingleOrDefault(Expression<Func<MenuReportXP, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<MenuReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<MenuReportXP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static MenuReportXP SingleOrDefault(Expression<Func<MenuReportXP, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<MenuReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<MenuReportXP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<MenuReportXP, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<MenuReportXP, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<MenuReportXP> Find(Expression<Func<MenuReportXP, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<MenuReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<MenuReportXP>();
        }
        
        public static IList<MenuReportXP> Find(Expression<Func<MenuReportXP, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<MenuReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<MenuReportXP>();
        }
        
        public static IQueryable<MenuReportXP> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<MenuReportXP> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MenuReportXP> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MenuReportXP> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MenuReportXP> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<MenuReportXP> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(MenuReportXP))
            {
                MenuReportXP compare=(MenuReportXP)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<MenuReportXP>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<MenuReportXP, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region MenuReportZD Class
	   
    /// <summary>
    /// A class which represents the MenuReportZD table in the PBM Database.
    /// </summary>
    public partial class MenuReportZD: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<MenuReportZD> TestItems;
        static TestRepository<MenuReportZD> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<MenuReportZD>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<MenuReportZD> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(MenuReportZD item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                MenuReportZD item=new MenuReportZD();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<MenuReportZD> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public MenuReportZD(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                MenuReportZD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MenuReportZD>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public MenuReportZD()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public MenuReportZD(Expression<Func<MenuReportZD, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<MenuReportZD> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<MenuReportZD> _repo;
            
            if(db.TestMode)
            {
                MenuReportZD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MenuReportZD>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<MenuReportZD> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static MenuReportZD SingleOrDefault(Expression<Func<MenuReportZD, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<MenuReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<MenuReportZD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static MenuReportZD SingleOrDefault(Expression<Func<MenuReportZD, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<MenuReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<MenuReportZD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<MenuReportZD, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<MenuReportZD, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<MenuReportZD> Find(Expression<Func<MenuReportZD, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<MenuReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<MenuReportZD>();
        }
        
        public static IList<MenuReportZD> Find(Expression<Func<MenuReportZD, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<MenuReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<MenuReportZD>();
        }
        
        public static IQueryable<MenuReportZD> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<MenuReportZD> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MenuReportZD> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MenuReportZD> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MenuReportZD> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<MenuReportZD> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(MenuReportZD))
            {
                MenuReportZD compare=(MenuReportZD)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<MenuReportZD>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<MenuReportZD, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region MenuReportZP Class
	   
    /// <summary>
    /// A class which represents the MenuReportZP table in the PBM Database.
    /// </summary>
    public partial class MenuReportZP: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<MenuReportZP> TestItems;
        static TestRepository<MenuReportZP> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<MenuReportZP>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<MenuReportZP> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(MenuReportZP item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                MenuReportZP item=new MenuReportZP();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<MenuReportZP> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public MenuReportZP(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                MenuReportZP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MenuReportZP>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public MenuReportZP()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public MenuReportZP(Expression<Func<MenuReportZP, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<MenuReportZP> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<MenuReportZP> _repo;
            
            if(db.TestMode)
            {
                MenuReportZP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MenuReportZP>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<MenuReportZP> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static MenuReportZP SingleOrDefault(Expression<Func<MenuReportZP, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<MenuReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<MenuReportZP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static MenuReportZP SingleOrDefault(Expression<Func<MenuReportZP, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<MenuReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<MenuReportZP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<MenuReportZP, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<MenuReportZP, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<MenuReportZP> Find(Expression<Func<MenuReportZP, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<MenuReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<MenuReportZP>();
        }
        
        public static IList<MenuReportZP> Find(Expression<Func<MenuReportZP, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<MenuReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<MenuReportZP>();
        }
        
        public static IQueryable<MenuReportZP> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<MenuReportZP> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MenuReportZP> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MenuReportZP> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MenuReportZP> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<MenuReportZP> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(MenuReportZP))
            {
                MenuReportZP compare=(MenuReportZP)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<MenuReportZP>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<MenuReportZP, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region MenuSelect Class
	   
    /// <summary>
    /// A class which represents the MenuSelect table in the PBM Database.
    /// </summary>
    public partial class MenuSelect: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<MenuSelect> TestItems;
        static TestRepository<MenuSelect> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<MenuSelect>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<MenuSelect> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(MenuSelect item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                MenuSelect item=new MenuSelect();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<MenuSelect> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public MenuSelect(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                MenuSelect.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MenuSelect>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public MenuSelect()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public MenuSelect(Expression<Func<MenuSelect, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<MenuSelect> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<MenuSelect> _repo;
            
            if(db.TestMode)
            {
                MenuSelect.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<MenuSelect>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<MenuSelect> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static MenuSelect SingleOrDefault(Expression<Func<MenuSelect, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<MenuSelect>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<MenuSelect>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static MenuSelect SingleOrDefault(Expression<Func<MenuSelect, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<MenuSelect>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<MenuSelect>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<MenuSelect, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<MenuSelect, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<MenuSelect> Find(Expression<Func<MenuSelect, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<MenuSelect>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<MenuSelect>();
        }
        
        public static IList<MenuSelect> Find(Expression<Func<MenuSelect, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<MenuSelect>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<MenuSelect>();
        }
        
        public static IQueryable<MenuSelect> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<MenuSelect> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MenuSelect> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MenuSelect> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MenuSelect> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<MenuSelect> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "Barcode";
        }

        public object KeyValue()
        {
            return this.Barcode;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.Barcode.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(MenuSelect))
            {
                MenuSelect compare=(MenuSelect)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.Barcode.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Barcode";
        }
        
        public static string GetKeyColumn()
        {
            return "Barcode";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "Barcode";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _Barcode;
        public string Barcode
        {
            get 
            { 
				return _Barcode; 
            }
            
            set
            {                
                _Barcode=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Barcode");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iMenu;
        public string iMenu
        {
            get 
            { 
				return _iMenu; 
            }
            
            set
            {                
                _iMenu=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iMenu");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iSelect;
        public string iSelect
        {
            get 
            { 
				return _iSelect; 
            }
            
            set
            {                
                _iSelect=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iSelect");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<MenuSelect>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<MenuSelect, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region PCASH Class
	   
    /// <summary>
    /// A class which represents the PCASH table in the PBM Database.
    /// </summary>
    public partial class PCASH: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<PCASH> TestItems;
        static TestRepository<PCASH> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<PCASH>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<PCASH> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(PCASH item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                PCASH item=new PCASH();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<PCASH> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public PCASH(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                PCASH.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PCASH>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public PCASH()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public PCASH(Expression<Func<PCASH, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<PCASH> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<PCASH> _repo;
            
            if(db.TestMode)
            {
                PCASH.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PCASH>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<PCASH> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static PCASH SingleOrDefault(Expression<Func<PCASH, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<PCASH>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PCASH>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static PCASH SingleOrDefault(Expression<Func<PCASH, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PCASH>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PCASH>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<PCASH, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<PCASH, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<PCASH> Find(Expression<Func<PCASH, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<PCASH>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PCASH>();
        }
        
        public static IList<PCASH> Find(Expression<Func<PCASH, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PCASH>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PCASH>();
        }
        
        public static IQueryable<PCASH> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<PCASH> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<PCASH> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<PCASH> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<PCASH> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<PCASH> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iNo.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(PCASH))
            {
                PCASH compare=(PCASH)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iNo.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iNo";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iNo";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iNo;
        public string iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _iRate;
        public long? iRate
        {
            get 
            { 
				return _iRate; 
            }
            
            set
            {                
                _iRate=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iRate");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDescription;
        public string iDescription
        {
            get 
            { 
				return _iDescription; 
            }
            
            set
            {                
                _iDescription=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDescription");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iflag;
        public string iflag
        {
            get 
            { 
				return _iflag; 
            }
            
            set
            {                
                _iflag=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iflag");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _ipayment;
        public long? ipayment
        {
            get 
            { 
				return _ipayment; 
            }
            
            set
            {                
                _ipayment=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ipayment");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<PCASH>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<PCASH, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region PLU Class
	   
    /// <summary>
    /// A class which represents the PLU table in the PBM Database.
    /// </summary>
    public partial class PLU: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<PLU> TestItems;
        static TestRepository<PLU> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<PLU>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<PLU> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(PLU item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                PLU item=new PLU();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<PLU> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public PLU(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                PLU.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PLU>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public PLU()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public PLU(Expression<Func<PLU, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<PLU> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<PLU> _repo;
            
            if(db.TestMode)
            {
                PLU.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PLU>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<PLU> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static PLU SingleOrDefault(Expression<Func<PLU, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<PLU>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PLU>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static PLU SingleOrDefault(Expression<Func<PLU, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PLU>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PLU>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<PLU, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<PLU, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<PLU> Find(Expression<Func<PLU, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<PLU>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PLU>();
        }
        
        public static IList<PLU> Find(Expression<Func<PLU, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PLU>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PLU>();
        }
        
        public static IQueryable<PLU> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<PLU> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<PLU> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<PLU> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<PLU> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<PLU> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "ino";
        }

        public object KeyValue()
        {
            return this.ino;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.Bar_Code.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(PLU))
            {
                PLU compare=(PLU)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.Bar_Code.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Bar_Code";
        }
        
        public static string GetKeyColumn()
        {
            return "ino";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "Bar_Code";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _ino;
        public long? ino
        {
            get 
            { 
				return _ino; 
            }
            
            set
            {                
                _ino=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ino");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Bar_Code;
        public string Bar_Code
        {
            get 
            { 
				return _Bar_Code; 
            }
            
            set
            {                
                _Bar_Code=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Bar_Code");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Description;
        public string Description
        {
            get 
            { 
				return _Description; 
            }
            
            set
            {                
                _Description=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _detail;
        public string detail
        {
            get 
            { 
				return _detail; 
            }
            
            set
            {                
                _detail=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="detail");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Depa_NO;
        public string Depa_NO
        {
            get 
            { 
				return _Depa_NO; 
            }
            
            set
            {                
                _Depa_NO=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Depa_NO");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _third_price;
        public string third_price
        {
            get 
            { 
				return _third_price; 
            }
            
            set
            {                
                _third_price=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="third_price");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _sec_price;
        public string sec_price
        {
            get 
            { 
				return _sec_price; 
            }
            
            set
            {                
                _sec_price=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="sec_price");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _pre_Price;
        public string pre_Price
        {
            get 
            { 
				return _pre_Price; 
            }
            
            set
            {                
                _pre_Price=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="pre_Price");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _PriceMat;
        public string PriceMat
        {
            get 
            { 
				return _PriceMat; 
            }
            
            set
            {                
                _PriceMat=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PriceMat");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        double? _Eable;
        public double? Eable
        {
            get 
            { 
				return _Eable; 
            }
            
            set
            {                
                _Eable=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Eable");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        double? _disp_flag;
        public double? disp_flag
        {
            get 
            { 
				return _disp_flag; 
            }
            
            set
            {                
                _disp_flag=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="disp_flag");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _menu_flag;
        public string menu_flag
        {
            get 
            { 
				return _menu_flag; 
            }
            
            set
            {                
                _menu_flag=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="menu_flag");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        double? _plu_group;
        public double? plu_group
        {
            get 
            { 
				return _plu_group; 
            }
            
            set
            {                
                _plu_group=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="plu_group");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        double? _Attribute;
        public double? Attribute
        {
            get 
            { 
				return _Attribute; 
            }
            
            set
            {                
                _Attribute=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Attribute");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _saft_stock;
        public string saft_stock
        {
            get 
            { 
				return _saft_stock; 
            }
            
            set
            {                
                _saft_stock=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="saft_stock");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Stock;
        public string Stock
        {
            get 
            { 
				return _Stock; 
            }
            
            set
            {                
                _Stock=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Stock");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        double? _stock_flag;
        public double? stock_flag
        {
            get 
            { 
				return _stock_flag; 
            }
            
            set
            {                
                _stock_flag=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="stock_flag");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc1;
        public string Desc1
        {
            get 
            { 
				return _Desc1; 
            }
            
            set
            {                
                _Desc1=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc1");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc2;
        public string Desc2
        {
            get 
            { 
				return _Desc2; 
            }
            
            set
            {                
                _Desc2=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc2");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc3;
        public string Desc3
        {
            get 
            { 
				return _Desc3; 
            }
            
            set
            {                
                _Desc3=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc3");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc4;
        public string Desc4
        {
            get 
            { 
				return _Desc4; 
            }
            
            set
            {                
                _Desc4=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc4");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc5;
        public string Desc5
        {
            get 
            { 
				return _Desc5; 
            }
            
            set
            {                
                _Desc5=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc5");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc6;
        public string Desc6
        {
            get 
            { 
				return _Desc6; 
            }
            
            set
            {                
                _Desc6=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc6");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc7;
        public string Desc7
        {
            get 
            { 
				return _Desc7; 
            }
            
            set
            {                
                _Desc7=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc7");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc8;
        public string Desc8
        {
            get 
            { 
				return _Desc8; 
            }
            
            set
            {                
                _Desc8=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc8");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc9;
        public string Desc9
        {
            get 
            { 
				return _Desc9; 
            }
            
            set
            {                
                _Desc9=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc9");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc10;
        public string Desc10
        {
            get 
            { 
				return _Desc10; 
            }
            
            set
            {                
                _Desc10=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc10");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc11;
        public string Desc11
        {
            get 
            { 
				return _Desc11; 
            }
            
            set
            {                
                _Desc11=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc11");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc12;
        public string Desc12
        {
            get 
            { 
				return _Desc12; 
            }
            
            set
            {                
                _Desc12=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc12");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<PLU>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<PLU, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region PLUGroup Class
	   
    /// <summary>
    /// A class which represents the PLUGroup table in the PBM Database.
    /// </summary>
    public partial class PLUGroup: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<PLUGroup> TestItems;
        static TestRepository<PLUGroup> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<PLUGroup>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<PLUGroup> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(PLUGroup item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                PLUGroup item=new PLUGroup();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<PLUGroup> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public PLUGroup(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                PLUGroup.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PLUGroup>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public PLUGroup()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public PLUGroup(Expression<Func<PLUGroup, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<PLUGroup> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<PLUGroup> _repo;
            
            if(db.TestMode)
            {
                PLUGroup.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PLUGroup>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<PLUGroup> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static PLUGroup SingleOrDefault(Expression<Func<PLUGroup, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<PLUGroup>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PLUGroup>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static PLUGroup SingleOrDefault(Expression<Func<PLUGroup, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PLUGroup>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PLUGroup>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<PLUGroup, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<PLUGroup, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<PLUGroup> Find(Expression<Func<PLUGroup, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<PLUGroup>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PLUGroup>();
        }
        
        public static IList<PLUGroup> Find(Expression<Func<PLUGroup, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PLUGroup>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PLUGroup>();
        }
        
        public static IQueryable<PLUGroup> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<PLUGroup> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<PLUGroup> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<PLUGroup> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<PLUGroup> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<PLUGroup> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "PLUGroupNo";
        }

        public object KeyValue()
        {
            return this.PLUGroupNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.PLUGroupNo.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(PLUGroup))
            {
                PLUGroup compare=(PLUGroup)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.PLUGroupNo.ToString();
        }

        public string DescriptorColumn() 
        {
            return "PLUGroupNo";
        }
        
        public static string GetKeyColumn()
        {
            return "PLUGroupNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "PLUGroupNo";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _PLUGroupNo;
        public string PLUGroupNo
        {
            get 
            { 
				return _PLUGroupNo; 
            }
            
            set
            {                
                _PLUGroupNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PLUGroupNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _PLUNo;
        public long? PLUNo
        {
            get 
            { 
				return _PLUNo; 
            }
            
            set
            {                
                _PLUNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PLUNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<PLUGroup>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<PLUGroup, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region PLUHourlyReportXD Class
	   
    /// <summary>
    /// A class which represents the PLUHourlyReportXD table in the PBM Database.
    /// </summary>
    public partial class PLUHourlyReportXD: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<PLUHourlyReportXD> TestItems;
        static TestRepository<PLUHourlyReportXD> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<PLUHourlyReportXD>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<PLUHourlyReportXD> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(PLUHourlyReportXD item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                PLUHourlyReportXD item=new PLUHourlyReportXD();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<PLUHourlyReportXD> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public PLUHourlyReportXD(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                PLUHourlyReportXD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PLUHourlyReportXD>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public PLUHourlyReportXD()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public PLUHourlyReportXD(Expression<Func<PLUHourlyReportXD, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<PLUHourlyReportXD> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<PLUHourlyReportXD> _repo;
            
            if(db.TestMode)
            {
                PLUHourlyReportXD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PLUHourlyReportXD>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<PLUHourlyReportXD> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static PLUHourlyReportXD SingleOrDefault(Expression<Func<PLUHourlyReportXD, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<PLUHourlyReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PLUHourlyReportXD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static PLUHourlyReportXD SingleOrDefault(Expression<Func<PLUHourlyReportXD, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PLUHourlyReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PLUHourlyReportXD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<PLUHourlyReportXD, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<PLUHourlyReportXD, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<PLUHourlyReportXD> Find(Expression<Func<PLUHourlyReportXD, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<PLUHourlyReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PLUHourlyReportXD>();
        }
        
        public static IList<PLUHourlyReportXD> Find(Expression<Func<PLUHourlyReportXD, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PLUHourlyReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PLUHourlyReportXD>();
        }
        
        public static IQueryable<PLUHourlyReportXD> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<PLUHourlyReportXD> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<PLUHourlyReportXD> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<PLUHourlyReportXD> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<PLUHourlyReportXD> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<PLUHourlyReportXD> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iNo.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(PLUHourlyReportXD))
            {
                PLUHourlyReportXD compare=(PLUHourlyReportXD)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iNo.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iNo";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iNo";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iNo;
        public string iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iHour;
        public string iHour
        {
            get 
            { 
				return _iHour; 
            }
            
            set
            {                
                _iHour=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iHour");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDesc;
        public string iDesc
        {
            get 
            { 
				return _iDesc; 
            }
            
            set
            {                
                _iDesc=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDesc");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<PLUHourlyReportXD>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<PLUHourlyReportXD, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region PLUHourlyReportZD Class
	   
    /// <summary>
    /// A class which represents the PLUHourlyReportZD table in the PBM Database.
    /// </summary>
    public partial class PLUHourlyReportZD: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<PLUHourlyReportZD> TestItems;
        static TestRepository<PLUHourlyReportZD> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<PLUHourlyReportZD>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<PLUHourlyReportZD> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(PLUHourlyReportZD item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                PLUHourlyReportZD item=new PLUHourlyReportZD();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<PLUHourlyReportZD> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public PLUHourlyReportZD(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                PLUHourlyReportZD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PLUHourlyReportZD>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public PLUHourlyReportZD()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public PLUHourlyReportZD(Expression<Func<PLUHourlyReportZD, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<PLUHourlyReportZD> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<PLUHourlyReportZD> _repo;
            
            if(db.TestMode)
            {
                PLUHourlyReportZD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PLUHourlyReportZD>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<PLUHourlyReportZD> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static PLUHourlyReportZD SingleOrDefault(Expression<Func<PLUHourlyReportZD, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<PLUHourlyReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PLUHourlyReportZD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static PLUHourlyReportZD SingleOrDefault(Expression<Func<PLUHourlyReportZD, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PLUHourlyReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PLUHourlyReportZD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<PLUHourlyReportZD, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<PLUHourlyReportZD, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<PLUHourlyReportZD> Find(Expression<Func<PLUHourlyReportZD, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<PLUHourlyReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PLUHourlyReportZD>();
        }
        
        public static IList<PLUHourlyReportZD> Find(Expression<Func<PLUHourlyReportZD, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PLUHourlyReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PLUHourlyReportZD>();
        }
        
        public static IQueryable<PLUHourlyReportZD> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<PLUHourlyReportZD> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<PLUHourlyReportZD> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<PLUHourlyReportZD> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<PLUHourlyReportZD> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<PLUHourlyReportZD> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iNo.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(PLUHourlyReportZD))
            {
                PLUHourlyReportZD compare=(PLUHourlyReportZD)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iNo.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iNo";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iNo";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iNo;
        public string iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iHour;
        public string iHour
        {
            get 
            { 
				return _iHour; 
            }
            
            set
            {                
                _iHour=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iHour");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDesc;
        public string iDesc
        {
            get 
            { 
				return _iDesc; 
            }
            
            set
            {                
                _iDesc=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDesc");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _icount;
        public string icount
        {
            get 
            { 
				return _icount; 
            }
            
            set
            {                
                _icount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="icount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<PLUHourlyReportZD>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<PLUHourlyReportZD, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region PluRelationTable Class
	   
    /// <summary>
    /// A class which represents the PluRelationTable table in the PBM Database.
    /// </summary>
    public partial class PluRelationTable: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<PluRelationTable> TestItems;
        static TestRepository<PluRelationTable> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<PluRelationTable>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<PluRelationTable> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(PluRelationTable item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                PluRelationTable item=new PluRelationTable();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<PluRelationTable> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public PluRelationTable(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                PluRelationTable.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PluRelationTable>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public PluRelationTable()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public PluRelationTable(Expression<Func<PluRelationTable, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<PluRelationTable> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<PluRelationTable> _repo;
            
            if(db.TestMode)
            {
                PluRelationTable.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PluRelationTable>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<PluRelationTable> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static PluRelationTable SingleOrDefault(Expression<Func<PluRelationTable, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<PluRelationTable>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PluRelationTable>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static PluRelationTable SingleOrDefault(Expression<Func<PluRelationTable, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PluRelationTable>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PluRelationTable>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<PluRelationTable, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<PluRelationTable, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<PluRelationTable> Find(Expression<Func<PluRelationTable, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<PluRelationTable>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PluRelationTable>();
        }
        
        public static IList<PluRelationTable> Find(Expression<Func<PluRelationTable, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PluRelationTable>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PluRelationTable>();
        }
        
        public static IQueryable<PluRelationTable> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<PluRelationTable> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<PluRelationTable> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<PluRelationTable> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<PluRelationTable> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<PluRelationTable> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.MainPLUNo.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(PluRelationTable))
            {
                PluRelationTable compare=(PluRelationTable)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.MainPLUNo.ToString();
        }

        public string DescriptorColumn() 
        {
            return "MainPLUNo";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "MainPLUNo";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long _iNo;
        public long iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _MainPLUNo;
        public long? MainPLUNo
        {
            get 
            { 
				return _MainPLUNo; 
            }
            
            set
            {                
                _MainPLUNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MainPLUNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _SalvePLUNo;
        public long? SalvePLUNo
        {
            get 
            { 
				return _SalvePLUNo; 
            }
            
            set
            {                
                _SalvePLUNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SalvePLUNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<PluRelationTable>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<PluRelationTable, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region PLUReportXD Class
	   
    /// <summary>
    /// A class which represents the PLUReportXD table in the PBM Database.
    /// </summary>
    public partial class PLUReportXD: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<PLUReportXD> TestItems;
        static TestRepository<PLUReportXD> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<PLUReportXD>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<PLUReportXD> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(PLUReportXD item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                PLUReportXD item=new PLUReportXD();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<PLUReportXD> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public PLUReportXD(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                PLUReportXD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PLUReportXD>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public PLUReportXD()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public PLUReportXD(Expression<Func<PLUReportXD, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<PLUReportXD> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<PLUReportXD> _repo;
            
            if(db.TestMode)
            {
                PLUReportXD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PLUReportXD>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<PLUReportXD> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static PLUReportXD SingleOrDefault(Expression<Func<PLUReportXD, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<PLUReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PLUReportXD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static PLUReportXD SingleOrDefault(Expression<Func<PLUReportXD, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PLUReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PLUReportXD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<PLUReportXD, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<PLUReportXD, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<PLUReportXD> Find(Expression<Func<PLUReportXD, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<PLUReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PLUReportXD>();
        }
        
        public static IList<PLUReportXD> Find(Expression<Func<PLUReportXD, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PLUReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PLUReportXD>();
        }
        
        public static IQueryable<PLUReportXD> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<PLUReportXD> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<PLUReportXD> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<PLUReportXD> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<PLUReportXD> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<PLUReportXD> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iCode.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(PLUReportXD))
            {
                PLUReportXD compare=(PLUReportXD)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iCode.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iCode";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iCode";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iCode;
        public string iCode
        {
            get 
            { 
				return _iCode; 
            }
            
            set
            {                
                _iCode=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iCode");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDesc;
        public string iDesc
        {
            get 
            { 
				return _iDesc; 
            }
            
            set
            {                
                _iDesc=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDesc");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iCount;
        public string iCount
        {
            get 
            { 
				return _iCount; 
            }
            
            set
            {                
                _iCount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iCount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iStock;
        public string iStock
        {
            get 
            { 
				return _iStock; 
            }
            
            set
            {                
                _iStock=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iStock");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<PLUReportXD>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<PLUReportXD, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region PLUReportXP Class
	   
    /// <summary>
    /// A class which represents the PLUReportXP table in the PBM Database.
    /// </summary>
    public partial class PLUReportXP: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<PLUReportXP> TestItems;
        static TestRepository<PLUReportXP> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<PLUReportXP>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<PLUReportXP> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(PLUReportXP item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                PLUReportXP item=new PLUReportXP();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<PLUReportXP> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public PLUReportXP(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                PLUReportXP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PLUReportXP>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public PLUReportXP()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public PLUReportXP(Expression<Func<PLUReportXP, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<PLUReportXP> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<PLUReportXP> _repo;
            
            if(db.TestMode)
            {
                PLUReportXP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PLUReportXP>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<PLUReportXP> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static PLUReportXP SingleOrDefault(Expression<Func<PLUReportXP, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<PLUReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PLUReportXP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static PLUReportXP SingleOrDefault(Expression<Func<PLUReportXP, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PLUReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PLUReportXP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<PLUReportXP, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<PLUReportXP, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<PLUReportXP> Find(Expression<Func<PLUReportXP, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<PLUReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PLUReportXP>();
        }
        
        public static IList<PLUReportXP> Find(Expression<Func<PLUReportXP, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PLUReportXP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PLUReportXP>();
        }
        
        public static IQueryable<PLUReportXP> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<PLUReportXP> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<PLUReportXP> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<PLUReportXP> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<PLUReportXP> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<PLUReportXP> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iCode.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(PLUReportXP))
            {
                PLUReportXP compare=(PLUReportXP)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iCode.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iCode";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iCode";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long _iNo;
        public long iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iCode;
        public string iCode
        {
            get 
            { 
				return _iCode; 
            }
            
            set
            {                
                _iCode=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iCode");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDesc;
        public string iDesc
        {
            get 
            { 
				return _iDesc; 
            }
            
            set
            {                
                _iDesc=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDesc");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iCount;
        public string iCount
        {
            get 
            { 
				return _iCount; 
            }
            
            set
            {                
                _iCount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iCount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iStock;
        public string iStock
        {
            get 
            { 
				return _iStock; 
            }
            
            set
            {                
                _iStock=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iStock");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<PLUReportXP>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<PLUReportXP, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region PLUReportZD Class
	   
    /// <summary>
    /// A class which represents the PLUReportZD table in the PBM Database.
    /// </summary>
    public partial class PLUReportZD: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<PLUReportZD> TestItems;
        static TestRepository<PLUReportZD> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<PLUReportZD>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<PLUReportZD> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(PLUReportZD item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                PLUReportZD item=new PLUReportZD();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<PLUReportZD> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public PLUReportZD(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                PLUReportZD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PLUReportZD>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public PLUReportZD()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public PLUReportZD(Expression<Func<PLUReportZD, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<PLUReportZD> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<PLUReportZD> _repo;
            
            if(db.TestMode)
            {
                PLUReportZD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PLUReportZD>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<PLUReportZD> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static PLUReportZD SingleOrDefault(Expression<Func<PLUReportZD, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<PLUReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PLUReportZD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static PLUReportZD SingleOrDefault(Expression<Func<PLUReportZD, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PLUReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PLUReportZD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<PLUReportZD, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<PLUReportZD, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<PLUReportZD> Find(Expression<Func<PLUReportZD, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<PLUReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PLUReportZD>();
        }
        
        public static IList<PLUReportZD> Find(Expression<Func<PLUReportZD, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PLUReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PLUReportZD>();
        }
        
        public static IQueryable<PLUReportZD> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<PLUReportZD> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<PLUReportZD> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<PLUReportZD> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<PLUReportZD> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<PLUReportZD> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iCode.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(PLUReportZD))
            {
                PLUReportZD compare=(PLUReportZD)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iCode.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iCode";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iCode";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iCode;
        public string iCode
        {
            get 
            { 
				return _iCode; 
            }
            
            set
            {                
                _iCode=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iCode");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDesc;
        public string iDesc
        {
            get 
            { 
				return _iDesc; 
            }
            
            set
            {                
                _iDesc=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDesc");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iCount;
        public string iCount
        {
            get 
            { 
				return _iCount; 
            }
            
            set
            {                
                _iCount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iCount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iStock;
        public string iStock
        {
            get 
            { 
				return _iStock; 
            }
            
            set
            {                
                _iStock=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iStock");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<PLUReportZD>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<PLUReportZD, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region PLUReportZP Class
	   
    /// <summary>
    /// A class which represents the PLUReportZP table in the PBM Database.
    /// </summary>
    public partial class PLUReportZP: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<PLUReportZP> TestItems;
        static TestRepository<PLUReportZP> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<PLUReportZP>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<PLUReportZP> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(PLUReportZP item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                PLUReportZP item=new PLUReportZP();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<PLUReportZP> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public PLUReportZP(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                PLUReportZP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PLUReportZP>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public PLUReportZP()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public PLUReportZP(Expression<Func<PLUReportZP, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<PLUReportZP> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<PLUReportZP> _repo;
            
            if(db.TestMode)
            {
                PLUReportZP.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PLUReportZP>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<PLUReportZP> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static PLUReportZP SingleOrDefault(Expression<Func<PLUReportZP, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<PLUReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PLUReportZP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static PLUReportZP SingleOrDefault(Expression<Func<PLUReportZP, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PLUReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PLUReportZP>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<PLUReportZP, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<PLUReportZP, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<PLUReportZP> Find(Expression<Func<PLUReportZP, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<PLUReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PLUReportZP>();
        }
        
        public static IList<PLUReportZP> Find(Expression<Func<PLUReportZP, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PLUReportZP>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PLUReportZP>();
        }
        
        public static IQueryable<PLUReportZP> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<PLUReportZP> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<PLUReportZP> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<PLUReportZP> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<PLUReportZP> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<PLUReportZP> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iCode.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(PLUReportZP))
            {
                PLUReportZP compare=(PLUReportZP)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iCode.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iCode";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iCode";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iCode;
        public string iCode
        {
            get 
            { 
				return _iCode; 
            }
            
            set
            {                
                _iCode=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iCode");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDesc;
        public string iDesc
        {
            get 
            { 
				return _iDesc; 
            }
            
            set
            {                
                _iDesc=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDesc");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iCount;
        public string iCount
        {
            get 
            { 
				return _iCount; 
            }
            
            set
            {                
                _iCount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iCount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iStock;
        public string iStock
        {
            get 
            { 
				return _iStock; 
            }
            
            set
            {                
                _iStock=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iStock");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<PLUReportZP>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<PLUReportZP, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region PLUStockReport Class
	   
    /// <summary>
    /// A class which represents the PLUStockReport table in the PBM Database.
    /// </summary>
    public partial class PLUStockReport: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<PLUStockReport> TestItems;
        static TestRepository<PLUStockReport> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<PLUStockReport>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<PLUStockReport> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(PLUStockReport item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                PLUStockReport item=new PLUStockReport();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<PLUStockReport> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public PLUStockReport(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                PLUStockReport.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PLUStockReport>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public PLUStockReport()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public PLUStockReport(Expression<Func<PLUStockReport, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<PLUStockReport> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<PLUStockReport> _repo;
            
            if(db.TestMode)
            {
                PLUStockReport.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<PLUStockReport>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<PLUStockReport> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static PLUStockReport SingleOrDefault(Expression<Func<PLUStockReport, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<PLUStockReport>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PLUStockReport>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static PLUStockReport SingleOrDefault(Expression<Func<PLUStockReport, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PLUStockReport>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<PLUStockReport>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<PLUStockReport, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<PLUStockReport, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<PLUStockReport> Find(Expression<Func<PLUStockReport, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<PLUStockReport>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PLUStockReport>();
        }
        
        public static IList<PLUStockReport> Find(Expression<Func<PLUStockReport, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<PLUStockReport>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<PLUStockReport>();
        }
        
        public static IQueryable<PLUStockReport> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<PLUStockReport> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<PLUStockReport> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<PLUStockReport> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<PLUStockReport> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<PLUStockReport> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "INo";
        }

        public object KeyValue()
        {
            return this.INo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.INo.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(PLUStockReport))
            {
                PLUStockReport compare=(PLUStockReport)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.INo.ToString();
        }

        public string DescriptorColumn() 
        {
            return "INo";
        }
        
        public static string GetKeyColumn()
        {
            return "INo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "INo";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _INo;
        public string INo
        {
            get 
            { 
				return _INo; 
            }
            
            set
            {                
                _INo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="INo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iStock;
        public string iStock
        {
            get 
            { 
				return _iStock; 
            }
            
            set
            {                
                _iStock=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iStock");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<PLUStockReport>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<PLUStockReport, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region RefundDesc Class
	   
    /// <summary>
    /// A class which represents the RefundDesc table in the PBM Database.
    /// </summary>
    public partial class RefundDesc: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<RefundDesc> TestItems;
        static TestRepository<RefundDesc> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<RefundDesc>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<RefundDesc> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(RefundDesc item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                RefundDesc item=new RefundDesc();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<RefundDesc> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public RefundDesc(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                RefundDesc.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<RefundDesc>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public RefundDesc()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public RefundDesc(Expression<Func<RefundDesc, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<RefundDesc> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<RefundDesc> _repo;
            
            if(db.TestMode)
            {
                RefundDesc.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<RefundDesc>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<RefundDesc> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static RefundDesc SingleOrDefault(Expression<Func<RefundDesc, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<RefundDesc>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<RefundDesc>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static RefundDesc SingleOrDefault(Expression<Func<RefundDesc, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<RefundDesc>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<RefundDesc>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<RefundDesc, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<RefundDesc, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<RefundDesc> Find(Expression<Func<RefundDesc, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<RefundDesc>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<RefundDesc>();
        }
        
        public static IList<RefundDesc> Find(Expression<Func<RefundDesc, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<RefundDesc>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<RefundDesc>();
        }
        
        public static IQueryable<RefundDesc> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<RefundDesc> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<RefundDesc> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<RefundDesc> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<RefundDesc> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<RefundDesc> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "idescription";
        }

        public object KeyValue()
        {
            return this.idescription;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.idescription.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(RefundDesc))
            {
                RefundDesc compare=(RefundDesc)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.idescription.ToString();
        }

        public string DescriptorColumn() 
        {
            return "idescription";
        }
        
        public static string GetKeyColumn()
        {
            return "idescription";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "idescription";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _idescription;
        public string idescription
        {
            get 
            { 
				return _idescription; 
            }
            
            set
            {                
                _idescription=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="idescription");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Price;
        public string Price
        {
            get 
            { 
				return _Price; 
            }
            
            set
            {                
                _Price=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Price");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Attribute;
        public string Attribute
        {
            get 
            { 
				return _Attribute; 
            }
            
            set
            {                
                _Attribute=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Attribute");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _halo;
        public string halo
        {
            get 
            { 
				return _halo; 
            }
            
            set
            {                
                _halo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="halo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc1;
        public string Desc1
        {
            get 
            { 
				return _Desc1; 
            }
            
            set
            {                
                _Desc1=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc1");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc2;
        public string Desc2
        {
            get 
            { 
				return _Desc2; 
            }
            
            set
            {                
                _Desc2=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc2");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc3;
        public string Desc3
        {
            get 
            { 
				return _Desc3; 
            }
            
            set
            {                
                _Desc3=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc3");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc4;
        public string Desc4
        {
            get 
            { 
				return _Desc4; 
            }
            
            set
            {                
                _Desc4=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc4");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc5;
        public string Desc5
        {
            get 
            { 
				return _Desc5; 
            }
            
            set
            {                
                _Desc5=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc5");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc6;
        public string Desc6
        {
            get 
            { 
				return _Desc6; 
            }
            
            set
            {                
                _Desc6=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc6");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc7;
        public string Desc7
        {
            get 
            { 
				return _Desc7; 
            }
            
            set
            {                
                _Desc7=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc7");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc8;
        public string Desc8
        {
            get 
            { 
				return _Desc8; 
            }
            
            set
            {                
                _Desc8=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc8");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc9;
        public string Desc9
        {
            get 
            { 
				return _Desc9; 
            }
            
            set
            {                
                _Desc9=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc9");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc10;
        public string Desc10
        {
            get 
            { 
				return _Desc10; 
            }
            
            set
            {                
                _Desc10=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc10");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc11;
        public string Desc11
        {
            get 
            { 
				return _Desc11; 
            }
            
            set
            {                
                _Desc11=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc11");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc12;
        public string Desc12
        {
            get 
            { 
				return _Desc12; 
            }
            
            set
            {                
                _Desc12=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc12");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc13;
        public string Desc13
        {
            get 
            { 
				return _Desc13; 
            }
            
            set
            {                
                _Desc13=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc13");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc14;
        public string Desc14
        {
            get 
            { 
				return _Desc14; 
            }
            
            set
            {                
                _Desc14=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc14");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc15;
        public string Desc15
        {
            get 
            { 
				return _Desc15; 
            }
            
            set
            {                
                _Desc15=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc15");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc16;
        public string Desc16
        {
            get 
            { 
				return _Desc16; 
            }
            
            set
            {                
                _Desc16=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc16");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<RefundDesc>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<RefundDesc, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region RegDesc Class
	   
    /// <summary>
    /// A class which represents the RegDesc table in the PBM Database.
    /// </summary>
    public partial class RegDesc: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<RegDesc> TestItems;
        static TestRepository<RegDesc> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<RegDesc>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<RegDesc> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(RegDesc item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                RegDesc item=new RegDesc();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<RegDesc> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public RegDesc(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                RegDesc.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<RegDesc>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public RegDesc()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public RegDesc(Expression<Func<RegDesc, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<RegDesc> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<RegDesc> _repo;
            
            if(db.TestMode)
            {
                RegDesc.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<RegDesc>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<RegDesc> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static RegDesc SingleOrDefault(Expression<Func<RegDesc, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<RegDesc>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<RegDesc>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static RegDesc SingleOrDefault(Expression<Func<RegDesc, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<RegDesc>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<RegDesc>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<RegDesc, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<RegDesc, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<RegDesc> Find(Expression<Func<RegDesc, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<RegDesc>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<RegDesc>();
        }
        
        public static IList<RegDesc> Find(Expression<Func<RegDesc, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<RegDesc>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<RegDesc>();
        }
        
        public static IQueryable<RegDesc> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<RegDesc> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<RegDesc> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<RegDesc> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<RegDesc> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<RegDesc> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iNo.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(RegDesc))
            {
                RegDesc compare=(RegDesc)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iNo.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iNo";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iNo";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iNo;
        public string iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _idescription;
        public string idescription
        {
            get 
            { 
				return _idescription; 
            }
            
            set
            {                
                _idescription=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="idescription");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iflag;
        public string iflag
        {
            get 
            { 
				return _iflag; 
            }
            
            set
            {                
                _iflag=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iflag");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<RegDesc>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<RegDesc, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region Signature Class
	   
    /// <summary>
    /// A class which represents the Signature table in the PBM Database.
    /// </summary>
    public partial class Signature: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<Signature> TestItems;
        static TestRepository<Signature> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<Signature>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<Signature> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(Signature item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Signature item=new Signature();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<Signature> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public Signature(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Signature.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Signature>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public Signature()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public Signature(Expression<Func<Signature, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<Signature> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<Signature> _repo;
            
            if(db.TestMode)
            {
                Signature.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Signature>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<Signature> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Signature SingleOrDefault(Expression<Func<Signature, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<Signature>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<Signature>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static Signature SingleOrDefault(Expression<Func<Signature, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<Signature>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<Signature>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<Signature, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<Signature, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<Signature> Find(Expression<Func<Signature, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<Signature>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<Signature>();
        }
        
        public static IList<Signature> Find(Expression<Func<Signature, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<Signature>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<Signature>();
        }
        
        public static IQueryable<Signature> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<Signature> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Signature> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Signature> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Signature> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<Signature> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iNo.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(Signature))
            {
                Signature compare=(Signature)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iNo.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iNo";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iNo";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iNo;
        public string iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _description;
        public string description
        {
            get 
            { 
				return _description; 
            }
            
            set
            {                
                _description=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="description");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iflag;
        public string iflag
        {
            get 
            { 
				return _iflag; 
            }
            
            set
            {                
                _iflag=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iflag");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<Signature>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<Signature, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region SysFlag Class
	   
    /// <summary>
    /// A class which represents the SysFlag table in the PBM Database.
    /// </summary>
    public partial class SysFlag: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<SysFlag> TestItems;
        static TestRepository<SysFlag> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<SysFlag>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<SysFlag> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(SysFlag item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                SysFlag item=new SysFlag();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<SysFlag> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public SysFlag(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                SysFlag.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<SysFlag>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public SysFlag()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public SysFlag(Expression<Func<SysFlag, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<SysFlag> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<SysFlag> _repo;
            
            if(db.TestMode)
            {
                SysFlag.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<SysFlag>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<SysFlag> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static SysFlag SingleOrDefault(Expression<Func<SysFlag, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<SysFlag>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<SysFlag>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static SysFlag SingleOrDefault(Expression<Func<SysFlag, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<SysFlag>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<SysFlag>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<SysFlag, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<SysFlag, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<SysFlag> Find(Expression<Func<SysFlag, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<SysFlag>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<SysFlag>();
        }
        
        public static IList<SysFlag> Find(Expression<Func<SysFlag, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<SysFlag>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<SysFlag>();
        }
        
        public static IQueryable<SysFlag> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<SysFlag> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SysFlag> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SysFlag> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SysFlag> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<SysFlag> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "byte1";
        }

        public object KeyValue()
        {
            return this.byte1;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.byte1.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(SysFlag))
            {
                SysFlag compare=(SysFlag)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.byte1.ToString();
        }

        public string DescriptorColumn() 
        {
            return "byte1";
        }
        
        public static string GetKeyColumn()
        {
            return "byte1";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "byte1";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _byte1;
        public string byte1
        {
            get 
            { 
				return _byte1; 
            }
            
            set
            {                
                _byte1=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="byte1");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _byte2;
        public string byte2
        {
            get 
            { 
				return _byte2; 
            }
            
            set
            {                
                _byte2=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="byte2");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _byte3;
        public string byte3
        {
            get 
            { 
				return _byte3; 
            }
            
            set
            {                
                _byte3=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="byte3");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _byte4;
        public string byte4
        {
            get 
            { 
				return _byte4; 
            }
            
            set
            {                
                _byte4=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="byte4");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _byte5;
        public string byte5
        {
            get 
            { 
				return _byte5; 
            }
            
            set
            {                
                _byte5=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="byte5");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _byte6;
        public string byte6
        {
            get 
            { 
				return _byte6; 
            }
            
            set
            {                
                _byte6=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="byte6");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _byte7;
        public string byte7
        {
            get 
            { 
				return _byte7; 
            }
            
            set
            {                
                _byte7=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="byte7");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _byte8;
        public string byte8
        {
            get 
            { 
				return _byte8; 
            }
            
            set
            {                
                _byte8=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="byte8");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _machineno;
        public string machineno
        {
            get 
            { 
				return _machineno; 
            }
            
            set
            {                
                _machineno=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="machineno");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _hald;
        public string hald
        {
            get 
            { 
				return _hald; 
            }
            
            set
            {                
                _hald=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="hald");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _logo;
        public string logo
        {
            get 
            { 
				return _logo; 
            }
            
            set
            {                
                _logo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="logo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _ReceiptNo;
        public string ReceiptNo
        {
            get 
            { 
				return _ReceiptNo; 
            }
            
            set
            {                
                _ReceiptNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReceiptNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Port1_Used;
        public string Port1_Used
        {
            get 
            { 
				return _Port1_Used; 
            }
            
            set
            {                
                _Port1_Used=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Port1_Used");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Out_Print_Model;
        public string Out_Print_Model
        {
            get 
            { 
				return _Out_Print_Model; 
            }
            
            set
            {                
                _Out_Print_Model=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Out_Print_Model");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Port2_Used;
        public string Port2_Used
        {
            get 
            { 
				return _Port2_Used; 
            }
            
            set
            {                
                _Port2_Used=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Port2_Used");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Handshake_Method;
        public string Handshake_Method
        {
            get 
            { 
				return _Handshake_Method; 
            }
            
            set
            {                
                _Handshake_Method=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Handshake_Method");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _KP_Feed_Lines;
        public string KP_Feed_Lines
        {
            get 
            { 
				return _KP_Feed_Lines; 
            }
            
            set
            {                
                _KP_Feed_Lines=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="KP_Feed_Lines");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _KP_Auto_Cut;
        public string KP_Auto_Cut
        {
            get 
            { 
				return _KP_Auto_Cut; 
            }
            
            set
            {                
                _KP_Auto_Cut=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="KP_Auto_Cut");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _WeightBarCodeID;
        public string WeightBarCodeID
        {
            get 
            { 
				return _WeightBarCodeID; 
            }
            
            set
            {                
                _WeightBarCodeID=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WeightBarCodeID");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _WeightBarCodeLength;
        public string WeightBarCodeLength
        {
            get 
            { 
				return _WeightBarCodeLength; 
            }
            
            set
            {                
                _WeightBarCodeLength=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WeightBarCodeLength");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _WeightBarCodeFlag;
        public string WeightBarCodeFlag
        {
            get 
            { 
				return _WeightBarCodeFlag; 
            }
            
            set
            {                
                _WeightBarCodeFlag=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WeightBarCodeFlag");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _HighBarCode;
        public long? HighBarCode
        {
            get 
            { 
				return _HighBarCode; 
            }
            
            set
            {                
                _HighBarCode=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HighBarCode");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _IncreaseDEPT;
        public long? IncreaseDEPT
        {
            get 
            { 
				return _IncreaseDEPT; 
            }
            
            set
            {                
                _IncreaseDEPT=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IncreaseDEPT");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _CountReprinting;
        public long? CountReprinting
        {
            get 
            { 
				return _CountReprinting; 
            }
            
            set
            {                
                _CountReprinting=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountReprinting");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _CashTotalMax;
        public string CashTotalMax
        {
            get 
            { 
				return _CashTotalMax; 
            }
            
            set
            {                
                _CashTotalMax=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CashTotalMax");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _CountLineFeed;
        public long? CountLineFeed
        {
            get 
            { 
				return _CountLineFeed; 
            }
            
            set
            {                
                _CountLineFeed=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountLineFeed");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<SysFlag>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<SysFlag, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region SysLog Class
	   
    /// <summary>
    /// A class which represents the SysLog table in the PBM Database.
    /// </summary>
    public partial class SysLog: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<SysLog> TestItems;
        static TestRepository<SysLog> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<SysLog>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<SysLog> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(SysLog item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                SysLog item=new SysLog();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<SysLog> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public SysLog(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                SysLog.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<SysLog>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public SysLog()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public SysLog(Expression<Func<SysLog, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<SysLog> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<SysLog> _repo;
            
            if(db.TestMode)
            {
                SysLog.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<SysLog>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<SysLog> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static SysLog SingleOrDefault(Expression<Func<SysLog, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<SysLog>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<SysLog>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static SysLog SingleOrDefault(Expression<Func<SysLog, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<SysLog>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<SysLog>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<SysLog, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<SysLog, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<SysLog> Find(Expression<Func<SysLog, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<SysLog>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<SysLog>();
        }
        
        public static IList<SysLog> Find(Expression<Func<SysLog, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<SysLog>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<SysLog>();
        }
        
        public static IQueryable<SysLog> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<SysLog> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SysLog> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SysLog> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SysLog> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<SysLog> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "LogDate";
        }

        public object KeyValue()
        {
            return this.LogDate;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.LogDate.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(SysLog))
            {
                SysLog compare=(SysLog)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.LogDate.ToString();
        }

        public string DescriptorColumn() 
        {
            return "LogDate";
        }
        
        public static string GetKeyColumn()
        {
            return "LogDate";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "LogDate";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _LogDate;
        public string LogDate
        {
            get 
            { 
				return _LogDate; 
            }
            
            set
            {                
                _LogDate=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LogDate");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _LogTime;
        public string LogTime
        {
            get 
            { 
				return _LogTime; 
            }
            
            set
            {                
                _LogTime=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LogTime");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _LogType;
        public string LogType
        {
            get 
            { 
				return _LogType; 
            }
            
            set
            {                
                _LogType=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LogType");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Title;
        public string Title
        {
            get 
            { 
				return _Title; 
            }
            
            set
            {                
                _Title=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Title");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Body;
        public string Body
        {
            get 
            { 
				return _Body; 
            }
            
            set
            {                
                _Body=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Body");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _UserName;
        public string UserName
        {
            get 
            { 
				return _UserName; 
            }
            
            set
            {                
                _UserName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<SysLog>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<SysLog, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region systemflag Class
	   
    /// <summary>
    /// A class which represents the systemflag table in the PBM Database.
    /// </summary>
    public partial class systemflag: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<systemflag> TestItems;
        static TestRepository<systemflag> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<systemflag>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<systemflag> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(systemflag item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                systemflag item=new systemflag();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<systemflag> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public systemflag(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                systemflag.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<systemflag>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public systemflag()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public systemflag(Expression<Func<systemflag, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<systemflag> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<systemflag> _repo;
            
            if(db.TestMode)
            {
                systemflag.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<systemflag>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<systemflag> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static systemflag SingleOrDefault(Expression<Func<systemflag, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<systemflag>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<systemflag>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static systemflag SingleOrDefault(Expression<Func<systemflag, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<systemflag>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<systemflag>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<systemflag, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<systemflag, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<systemflag> Find(Expression<Func<systemflag, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<systemflag>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<systemflag>();
        }
        
        public static IList<systemflag> Find(Expression<Func<systemflag, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<systemflag>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<systemflag>();
        }
        
        public static IQueryable<systemflag> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<systemflag> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<systemflag> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<systemflag> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<systemflag> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<systemflag> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "status1";
        }

        public object KeyValue()
        {
            return this.status1;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.status1.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(systemflag))
            {
                systemflag compare=(systemflag)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.status1.ToString();
        }

        public string DescriptorColumn() 
        {
            return "status1";
        }
        
        public static string GetKeyColumn()
        {
            return "status1";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "status1";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _status1;
        public string status1
        {
            get 
            { 
				return _status1; 
            }
            
            set
            {                
                _status1=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="status1");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _status2;
        public string status2
        {
            get 
            { 
				return _status2; 
            }
            
            set
            {                
                _status2=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="status2");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _status3;
        public string status3
        {
            get 
            { 
				return _status3; 
            }
            
            set
            {                
                _status3=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="status3");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _status4;
        public string status4
        {
            get 
            { 
				return _status4; 
            }
            
            set
            {                
                _status4=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="status4");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _status5;
        public string status5
        {
            get 
            { 
				return _status5; 
            }
            
            set
            {                
                _status5=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="status5");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _status6;
        public string status6
        {
            get 
            { 
				return _status6; 
            }
            
            set
            {                
                _status6=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="status6");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _status7;
        public string status7
        {
            get 
            { 
				return _status7; 
            }
            
            set
            {                
                _status7=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="status7");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Xmode;
        public string Xmode
        {
            get 
            { 
				return _Xmode; 
            }
            
            set
            {                
                _Xmode=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Xmode");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Pmode;
        public string Pmode
        {
            get 
            { 
				return _Pmode; 
            }
            
            set
            {                
                _Pmode=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Pmode");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Rmode;
        public string Rmode
        {
            get 
            { 
				return _Rmode; 
            }
            
            set
            {                
                _Rmode=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Rmode");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _HALO;
        public string HALO
        {
            get 
            { 
				return _HALO; 
            }
            
            set
            {                
                _HALO=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HALO");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _CashMax;
        public string CashMax
        {
            get 
            { 
				return _CashMax; 
            }
            
            set
            {                
                _CashMax=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CashMax");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _DailyZ;
        public string DailyZ
        {
            get 
            { 
				return _DailyZ; 
            }
            
            set
            {                
                _DailyZ=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DailyZ");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _PeriodZ;
        public string PeriodZ
        {
            get 
            { 
				return _PeriodZ; 
            }
            
            set
            {                
                _PeriodZ=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PeriodZ");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _ReceNo;
        public string ReceNo
        {
            get 
            { 
				return _ReceNo; 
            }
            
            set
            {                
                _ReceNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReceNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _MachineNo;
        public string MachineNo
        {
            get 
            { 
				return _MachineNo; 
            }
            
            set
            {                
                _MachineNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MachineNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _VatNo;
        public string VatNo
        {
            get 
            { 
				return _VatNo; 
            }
            
            set
            {                
                _VatNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VatNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _SecStart;
        public string SecStart
        {
            get 
            { 
				return _SecStart; 
            }
            
            set
            {                
                _SecStart=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SecStart");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _SecEnd;
        public string SecEnd
        {
            get 
            { 
				return _SecEnd; 
            }
            
            set
            {                
                _SecEnd=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SecEnd");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _ThirdStart;
        public string ThirdStart
        {
            get 
            { 
				return _ThirdStart; 
            }
            
            set
            {                
                _ThirdStart=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ThirdStart");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _ThirdEnd;
        public string ThirdEnd
        {
            get 
            { 
				return _ThirdEnd; 
            }
            
            set
            {                
                _ThirdEnd=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ThirdEnd");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Ezlink;
        public string Ezlink
        {
            get 
            { 
				return _Ezlink; 
            }
            
            set
            {                
                _Ezlink=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Ezlink");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _reportpwd;
        public string reportpwd
        {
            get 
            { 
				return _reportpwd; 
            }
            
            set
            {                
                _reportpwd=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="reportpwd");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<systemflag>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<systemflag, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region TableReportXD Class
	   
    /// <summary>
    /// A class which represents the TableReportXD table in the PBM Database.
    /// </summary>
    public partial class TableReportXD: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<TableReportXD> TestItems;
        static TestRepository<TableReportXD> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<TableReportXD>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<TableReportXD> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(TableReportXD item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                TableReportXD item=new TableReportXD();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<TableReportXD> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public TableReportXD(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                TableReportXD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<TableReportXD>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public TableReportXD()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public TableReportXD(Expression<Func<TableReportXD, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<TableReportXD> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<TableReportXD> _repo;
            
            if(db.TestMode)
            {
                TableReportXD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<TableReportXD>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<TableReportXD> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static TableReportXD SingleOrDefault(Expression<Func<TableReportXD, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<TableReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<TableReportXD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static TableReportXD SingleOrDefault(Expression<Func<TableReportXD, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<TableReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<TableReportXD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<TableReportXD, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<TableReportXD, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<TableReportXD> Find(Expression<Func<TableReportXD, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<TableReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<TableReportXD>();
        }
        
        public static IList<TableReportXD> Find(Expression<Func<TableReportXD, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<TableReportXD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<TableReportXD>();
        }
        
        public static IQueryable<TableReportXD> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<TableReportXD> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TableReportXD> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TableReportXD> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TableReportXD> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<TableReportXD> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(TableReportXD))
            {
                TableReportXD compare=(TableReportXD)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iCount;
        public string iCount
        {
            get 
            { 
				return _iCount; 
            }
            
            set
            {                
                _iCount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iCount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<TableReportXD>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<TableReportXD, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region TableReportZD Class
	   
    /// <summary>
    /// A class which represents the TableReportZD table in the PBM Database.
    /// </summary>
    public partial class TableReportZD: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<TableReportZD> TestItems;
        static TestRepository<TableReportZD> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<TableReportZD>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<TableReportZD> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(TableReportZD item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                TableReportZD item=new TableReportZD();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<TableReportZD> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public TableReportZD(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                TableReportZD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<TableReportZD>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public TableReportZD()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public TableReportZD(Expression<Func<TableReportZD, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<TableReportZD> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<TableReportZD> _repo;
            
            if(db.TestMode)
            {
                TableReportZD.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<TableReportZD>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<TableReportZD> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static TableReportZD SingleOrDefault(Expression<Func<TableReportZD, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<TableReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<TableReportZD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static TableReportZD SingleOrDefault(Expression<Func<TableReportZD, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<TableReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<TableReportZD>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<TableReportZD, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<TableReportZD, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<TableReportZD> Find(Expression<Func<TableReportZD, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<TableReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<TableReportZD>();
        }
        
        public static IList<TableReportZD> Find(Expression<Func<TableReportZD, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<TableReportZD>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<TableReportZD>();
        }
        
        public static IQueryable<TableReportZD> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<TableReportZD> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TableReportZD> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TableReportZD> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TableReportZD> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<TableReportZD> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(TableReportZD))
            {
                TableReportZD compare=(TableReportZD)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iCount;
        public string iCount
        {
            get 
            { 
				return _iCount; 
            }
            
            set
            {                
                _iCount=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iCount");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<TableReportZD>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<TableReportZD, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region TableSet Class
	   
    /// <summary>
    /// A class which represents the TableSet table in the PBM Database.
    /// </summary>
    public partial class TableSet: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<TableSet> TestItems;
        static TestRepository<TableSet> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<TableSet>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<TableSet> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(TableSet item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                TableSet item=new TableSet();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<TableSet> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public TableSet(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                TableSet.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<TableSet>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public TableSet()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public TableSet(Expression<Func<TableSet, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<TableSet> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<TableSet> _repo;
            
            if(db.TestMode)
            {
                TableSet.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<TableSet>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<TableSet> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static TableSet SingleOrDefault(Expression<Func<TableSet, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<TableSet>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<TableSet>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static TableSet SingleOrDefault(Expression<Func<TableSet, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<TableSet>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<TableSet>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<TableSet, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<TableSet, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<TableSet> Find(Expression<Func<TableSet, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<TableSet>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<TableSet>();
        }
        
        public static IList<TableSet> Find(Expression<Func<TableSet, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<TableSet>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<TableSet>();
        }
        
        public static IQueryable<TableSet> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<TableSet> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TableSet> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TableSet> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TableSet> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<TableSet> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNO";
        }

        public object KeyValue()
        {
            return this.iNO;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iNO.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(TableSet))
            {
                TableSet compare=(TableSet)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iNO.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iNO";
        }
        
        public static string GetKeyColumn()
        {
            return "iNO";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iNO";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iNO;
        public string iNO
        {
            get 
            { 
				return _iNO; 
            }
            
            set
            {                
                _iNO=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNO");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _LogiCode;
        public string LogiCode
        {
            get 
            { 
				return _LogiCode; 
            }
            
            set
            {                
                _LogiCode=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LogiCode");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Description;
        public string Description
        {
            get 
            { 
				return _Description; 
            }
            
            set
            {                
                _Description=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc1;
        public string Desc1
        {
            get 
            { 
				return _Desc1; 
            }
            
            set
            {                
                _Desc1=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc1");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc2;
        public string Desc2
        {
            get 
            { 
				return _Desc2; 
            }
            
            set
            {                
                _Desc2=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc2");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc3;
        public string Desc3
        {
            get 
            { 
				return _Desc3; 
            }
            
            set
            {                
                _Desc3=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc3");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc4;
        public string Desc4
        {
            get 
            { 
				return _Desc4; 
            }
            
            set
            {                
                _Desc4=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc4");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc5;
        public string Desc5
        {
            get 
            { 
				return _Desc5; 
            }
            
            set
            {                
                _Desc5=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc5");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc6;
        public string Desc6
        {
            get 
            { 
				return _Desc6; 
            }
            
            set
            {                
                _Desc6=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc6");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc7;
        public string Desc7
        {
            get 
            { 
				return _Desc7; 
            }
            
            set
            {                
                _Desc7=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc7");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc8;
        public string Desc8
        {
            get 
            { 
				return _Desc8; 
            }
            
            set
            {                
                _Desc8=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc8");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc9;
        public string Desc9
        {
            get 
            { 
				return _Desc9; 
            }
            
            set
            {                
                _Desc9=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc9");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc10;
        public string Desc10
        {
            get 
            { 
				return _Desc10; 
            }
            
            set
            {                
                _Desc10=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc10");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc11;
        public string Desc11
        {
            get 
            { 
				return _Desc11; 
            }
            
            set
            {                
                _Desc11=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc11");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc12;
        public string Desc12
        {
            get 
            { 
				return _Desc12; 
            }
            
            set
            {                
                _Desc12=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc12");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc13;
        public string Desc13
        {
            get 
            { 
				return _Desc13; 
            }
            
            set
            {                
                _Desc13=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc13");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc14;
        public string Desc14
        {
            get 
            { 
				return _Desc14; 
            }
            
            set
            {                
                _Desc14=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc14");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc15;
        public string Desc15
        {
            get 
            { 
				return _Desc15; 
            }
            
            set
            {                
                _Desc15=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc15");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc16;
        public string Desc16
        {
            get 
            { 
				return _Desc16; 
            }
            
            set
            {                
                _Desc16=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc16");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc17;
        public string Desc17
        {
            get 
            { 
				return _Desc17; 
            }
            
            set
            {                
                _Desc17=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc17");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc18;
        public string Desc18
        {
            get 
            { 
				return _Desc18; 
            }
            
            set
            {                
                _Desc18=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc18");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc19;
        public string Desc19
        {
            get 
            { 
				return _Desc19; 
            }
            
            set
            {                
                _Desc19=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc19");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc20;
        public string Desc20
        {
            get 
            { 
				return _Desc20; 
            }
            
            set
            {                
                _Desc20=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc20");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<TableSet>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<TableSet, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region TotalDesc Class
	   
    /// <summary>
    /// A class which represents the TotalDesc table in the PBM Database.
    /// </summary>
    public partial class TotalDesc: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<TotalDesc> TestItems;
        static TestRepository<TotalDesc> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<TotalDesc>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<TotalDesc> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(TotalDesc item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                TotalDesc item=new TotalDesc();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<TotalDesc> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public TotalDesc(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                TotalDesc.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<TotalDesc>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public TotalDesc()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public TotalDesc(Expression<Func<TotalDesc, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<TotalDesc> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<TotalDesc> _repo;
            
            if(db.TestMode)
            {
                TotalDesc.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<TotalDesc>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<TotalDesc> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static TotalDesc SingleOrDefault(Expression<Func<TotalDesc, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<TotalDesc>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<TotalDesc>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static TotalDesc SingleOrDefault(Expression<Func<TotalDesc, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<TotalDesc>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<TotalDesc>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<TotalDesc, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<TotalDesc, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<TotalDesc> Find(Expression<Func<TotalDesc, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<TotalDesc>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<TotalDesc>();
        }
        
        public static IList<TotalDesc> Find(Expression<Func<TotalDesc, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<TotalDesc>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<TotalDesc>();
        }
        
        public static IQueryable<TotalDesc> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<TotalDesc> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TotalDesc> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TotalDesc> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TotalDesc> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<TotalDesc> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iNo.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(TotalDesc))
            {
                TotalDesc compare=(TotalDesc)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iNo.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iNo";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iNo";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iNo;
        public string iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDescription;
        public string iDescription
        {
            get 
            { 
				return _iDescription; 
            }
            
            set
            {                
                _iDescription=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDescription");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iflag;
        public string iflag
        {
            get 
            { 
				return _iflag; 
            }
            
            set
            {                
                _iflag=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iflag");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iOpen;
        public string iOpen
        {
            get 
            { 
				return _iOpen; 
            }
            
            set
            {                
                _iOpen=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iOpen");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<TotalDesc>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<TotalDesc, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region Trailer Class
	   
    /// <summary>
    /// A class which represents the Trailer table in the PBM Database.
    /// </summary>
    public partial class Trailer: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<Trailer> TestItems;
        static TestRepository<Trailer> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<Trailer>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<Trailer> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(Trailer item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Trailer item=new Trailer();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<Trailer> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public Trailer(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Trailer.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Trailer>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public Trailer()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public Trailer(Expression<Func<Trailer, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<Trailer> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<Trailer> _repo;
            
            if(db.TestMode)
            {
                Trailer.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Trailer>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<Trailer> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Trailer SingleOrDefault(Expression<Func<Trailer, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<Trailer>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<Trailer>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static Trailer SingleOrDefault(Expression<Func<Trailer, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<Trailer>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<Trailer>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<Trailer, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<Trailer, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<Trailer> Find(Expression<Func<Trailer, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<Trailer>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<Trailer>();
        }
        
        public static IList<Trailer> Find(Expression<Func<Trailer, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<Trailer>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<Trailer>();
        }
        
        public static IQueryable<Trailer> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<Trailer> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Trailer> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Trailer> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Trailer> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<Trailer> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iNo.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(Trailer))
            {
                Trailer compare=(Trailer)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iNo.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iNo";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iNo";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iNo;
        public string iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _description;
        public string description
        {
            get 
            { 
				return _description; 
            }
            
            set
            {                
                _description=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="description");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size1;
        public string Size1
        {
            get 
            { 
				return _Size1; 
            }
            
            set
            {                
                _Size1=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size1");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg1;
        public string Msg1
        {
            get 
            { 
				return _Msg1; 
            }
            
            set
            {                
                _Msg1=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg1");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size2;
        public string Size2
        {
            get 
            { 
				return _Size2; 
            }
            
            set
            {                
                _Size2=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size2");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg2;
        public string Msg2
        {
            get 
            { 
				return _Msg2; 
            }
            
            set
            {                
                _Msg2=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg2");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size3;
        public string Size3
        {
            get 
            { 
				return _Size3; 
            }
            
            set
            {                
                _Size3=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size3");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg3;
        public string Msg3
        {
            get 
            { 
				return _Msg3; 
            }
            
            set
            {                
                _Msg3=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg3");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size4;
        public string Size4
        {
            get 
            { 
				return _Size4; 
            }
            
            set
            {                
                _Size4=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size4");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg4;
        public string Msg4
        {
            get 
            { 
				return _Msg4; 
            }
            
            set
            {                
                _Msg4=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg4");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size5;
        public string Size5
        {
            get 
            { 
				return _Size5; 
            }
            
            set
            {                
                _Size5=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size5");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg5;
        public string Msg5
        {
            get 
            { 
				return _Msg5; 
            }
            
            set
            {                
                _Msg5=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg5");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size6;
        public string Size6
        {
            get 
            { 
				return _Size6; 
            }
            
            set
            {                
                _Size6=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size6");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg6;
        public string Msg6
        {
            get 
            { 
				return _Msg6; 
            }
            
            set
            {                
                _Msg6=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg6");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size7;
        public string Size7
        {
            get 
            { 
				return _Size7; 
            }
            
            set
            {                
                _Size7=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size7");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg7;
        public string Msg7
        {
            get 
            { 
				return _Msg7; 
            }
            
            set
            {                
                _Msg7=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg7");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size8;
        public string Size8
        {
            get 
            { 
				return _Size8; 
            }
            
            set
            {                
                _Size8=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size8");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg8;
        public string Msg8
        {
            get 
            { 
				return _Msg8; 
            }
            
            set
            {                
                _Msg8=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg8");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size9;
        public string Size9
        {
            get 
            { 
				return _Size9; 
            }
            
            set
            {                
                _Size9=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size9");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg9;
        public string Msg9
        {
            get 
            { 
				return _Msg9; 
            }
            
            set
            {                
                _Msg9=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg9");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size10;
        public string Size10
        {
            get 
            { 
				return _Size10; 
            }
            
            set
            {                
                _Size10=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size10");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg10;
        public string Msg10
        {
            get 
            { 
				return _Msg10; 
            }
            
            set
            {                
                _Msg10=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg10");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size11;
        public string Size11
        {
            get 
            { 
				return _Size11; 
            }
            
            set
            {                
                _Size11=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size11");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg11;
        public string Msg11
        {
            get 
            { 
				return _Msg11; 
            }
            
            set
            {                
                _Msg11=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg11");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size12;
        public string Size12
        {
            get 
            { 
				return _Size12; 
            }
            
            set
            {                
                _Size12=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size12");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg12;
        public string Msg12
        {
            get 
            { 
				return _Msg12; 
            }
            
            set
            {                
                _Msg12=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg12");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size13;
        public string Size13
        {
            get 
            { 
				return _Size13; 
            }
            
            set
            {                
                _Size13=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size13");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg13;
        public string Msg13
        {
            get 
            { 
				return _Msg13; 
            }
            
            set
            {                
                _Msg13=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg13");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size14;
        public string Size14
        {
            get 
            { 
				return _Size14; 
            }
            
            set
            {                
                _Size14=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size14");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg14;
        public string Msg14
        {
            get 
            { 
				return _Msg14; 
            }
            
            set
            {                
                _Msg14=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg14");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size15;
        public string Size15
        {
            get 
            { 
				return _Size15; 
            }
            
            set
            {                
                _Size15=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size15");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg15;
        public string Msg15
        {
            get 
            { 
				return _Msg15; 
            }
            
            set
            {                
                _Msg15=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg15");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size16;
        public string Size16
        {
            get 
            { 
				return _Size16; 
            }
            
            set
            {                
                _Size16=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size16");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg16;
        public string Msg16
        {
            get 
            { 
				return _Msg16; 
            }
            
            set
            {                
                _Msg16=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg16");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size17;
        public string Size17
        {
            get 
            { 
				return _Size17; 
            }
            
            set
            {                
                _Size17=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size17");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg17;
        public string Msg17
        {
            get 
            { 
				return _Msg17; 
            }
            
            set
            {                
                _Msg17=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg17");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size18;
        public string Size18
        {
            get 
            { 
				return _Size18; 
            }
            
            set
            {                
                _Size18=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size18");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg18;
        public string Msg18
        {
            get 
            { 
				return _Msg18; 
            }
            
            set
            {                
                _Msg18=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg18");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size19;
        public string Size19
        {
            get 
            { 
				return _Size19; 
            }
            
            set
            {                
                _Size19=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size19");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg19;
        public string Msg19
        {
            get 
            { 
				return _Msg19; 
            }
            
            set
            {                
                _Msg19=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg19");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size20;
        public string Size20
        {
            get 
            { 
				return _Size20; 
            }
            
            set
            {                
                _Size20=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size20");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg20;
        public string Msg20
        {
            get 
            { 
				return _Msg20; 
            }
            
            set
            {                
                _Msg20=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg20");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size21;
        public string Size21
        {
            get 
            { 
				return _Size21; 
            }
            
            set
            {                
                _Size21=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size21");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg21;
        public string Msg21
        {
            get 
            { 
				return _Msg21; 
            }
            
            set
            {                
                _Msg21=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg21");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size22;
        public string Size22
        {
            get 
            { 
				return _Size22; 
            }
            
            set
            {                
                _Size22=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size22");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg22;
        public string Msg22
        {
            get 
            { 
				return _Msg22; 
            }
            
            set
            {                
                _Msg22=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg22");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size23;
        public string Size23
        {
            get 
            { 
				return _Size23; 
            }
            
            set
            {                
                _Size23=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size23");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg23;
        public string Msg23
        {
            get 
            { 
				return _Msg23; 
            }
            
            set
            {                
                _Msg23=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg23");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size24;
        public string Size24
        {
            get 
            { 
				return _Size24; 
            }
            
            set
            {                
                _Size24=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size24");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg24;
        public string Msg24
        {
            get 
            { 
				return _Msg24; 
            }
            
            set
            {                
                _Msg24=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg24");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size25;
        public string Size25
        {
            get 
            { 
				return _Size25; 
            }
            
            set
            {                
                _Size25=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size25");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg25;
        public string Msg25
        {
            get 
            { 
				return _Msg25; 
            }
            
            set
            {                
                _Msg25=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg25");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size26;
        public string Size26
        {
            get 
            { 
				return _Size26; 
            }
            
            set
            {                
                _Size26=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size26");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg26;
        public string Msg26
        {
            get 
            { 
				return _Msg26; 
            }
            
            set
            {                
                _Msg26=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg26");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size27;
        public string Size27
        {
            get 
            { 
				return _Size27; 
            }
            
            set
            {                
                _Size27=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size27");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg27;
        public string Msg27
        {
            get 
            { 
				return _Msg27; 
            }
            
            set
            {                
                _Msg27=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg27");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size28;
        public string Size28
        {
            get 
            { 
				return _Size28; 
            }
            
            set
            {                
                _Size28=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size28");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg28;
        public string Msg28
        {
            get 
            { 
				return _Msg28; 
            }
            
            set
            {                
                _Msg28=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg28");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size29;
        public string Size29
        {
            get 
            { 
				return _Size29; 
            }
            
            set
            {                
                _Size29=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size29");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg29;
        public string Msg29
        {
            get 
            { 
				return _Msg29; 
            }
            
            set
            {                
                _Msg29=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg29");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size30;
        public string Size30
        {
            get 
            { 
				return _Size30; 
            }
            
            set
            {                
                _Size30=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size30");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg30;
        public string Msg30
        {
            get 
            { 
				return _Msg30; 
            }
            
            set
            {                
                _Msg30=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg30");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size31;
        public string Size31
        {
            get 
            { 
				return _Size31; 
            }
            
            set
            {                
                _Size31=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size31");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg31;
        public string Msg31
        {
            get 
            { 
				return _Msg31; 
            }
            
            set
            {                
                _Msg31=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg31");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Size32;
        public string Size32
        {
            get 
            { 
				return _Size32; 
            }
            
            set
            {                
                _Size32=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size32");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Msg32;
        public string Msg32
        {
            get 
            { 
				return _Msg32; 
            }
            
            set
            {                
                _Msg32=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Msg32");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<Trailer>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<Trailer, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region User_Right Class
	   
    /// <summary>
    /// A class which represents the User_Right table in the PBM Database.
    /// </summary>
    public partial class User_Right: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<User_Right> TestItems;
        static TestRepository<User_Right> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<User_Right>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<User_Right> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(User_Right item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                User_Right item=new User_Right();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<User_Right> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public User_Right(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                User_Right.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<User_Right>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public User_Right()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public User_Right(Expression<Func<User_Right, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<User_Right> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<User_Right> _repo;
            
            if(db.TestMode)
            {
                User_Right.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<User_Right>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<User_Right> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static User_Right SingleOrDefault(Expression<Func<User_Right, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<User_Right>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<User_Right>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static User_Right SingleOrDefault(Expression<Func<User_Right, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<User_Right>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<User_Right>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<User_Right, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<User_Right, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<User_Right> Find(Expression<Func<User_Right, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<User_Right>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<User_Right>();
        }
        
        public static IList<User_Right> Find(Expression<Func<User_Right, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<User_Right>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<User_Right>();
        }
        
        public static IQueryable<User_Right> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<User_Right> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<User_Right> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<User_Right> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<User_Right> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<User_Right> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iNo.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(User_Right))
            {
                User_Right compare=(User_Right)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iNo.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iNo";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iNo";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iNo;
        public string iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _password;
        public string password
        {
            get 
            { 
				return _password; 
            }
            
            set
            {                
                _password=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="password");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _R_user;
        public string R_user
        {
            get 
            { 
				return _R_user; 
            }
            
            set
            {                
                _R_user=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="R_user");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _R_Edit;
        public string R_Edit
        {
            get 
            { 
				return _R_Edit; 
            }
            
            set
            {                
                _R_Edit=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="R_Edit");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _R_QueryReport;
        public string R_QueryReport
        {
            get 
            { 
				return _R_QueryReport; 
            }
            
            set
            {                
                _R_QueryReport=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="R_QueryReport");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _R_Send;
        public string R_Send
        {
            get 
            { 
				return _R_Send; 
            }
            
            set
            {                
                _R_Send=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="R_Send");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _R_Rece;
        public string R_Rece
        {
            get 
            { 
				return _R_Rece; 
            }
            
            set
            {                
                _R_Rece=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="R_Rece");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _R_ReceReport;
        public string R_ReceReport
        {
            get 
            { 
				return _R_ReceReport; 
            }
            
            set
            {                
                _R_ReceReport=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="R_ReceReport");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _R_Data;
        public string R_Data
        {
            get 
            { 
				return _R_Data; 
            }
            
            set
            {                
                _R_Data=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="R_Data");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _R_QueryLog;
        public string R_QueryLog
        {
            get 
            { 
				return _R_QueryLog; 
            }
            
            set
            {                
                _R_QueryLog=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="R_QueryLog");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _R_DelLog;
        public string R_DelLog
        {
            get 
            { 
				return _R_DelLog; 
            }
            
            set
            {                
                _R_DelLog=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="R_DelLog");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _R_All;
        public string R_All
        {
            get 
            { 
				return _R_All; 
            }
            
            set
            {                
                _R_All=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="R_All");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Remark;
        public string Remark
        {
            get 
            { 
				return _Remark; 
            }
            
            set
            {                
                _Remark=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Remark");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<User_Right>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<User_Right, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region VAT_Tax Class
	   
    /// <summary>
    /// A class which represents the VAT_Tax table in the PBM Database.
    /// </summary>
    public partial class VAT_Tax: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<VAT_Tax> TestItems;
        static TestRepository<VAT_Tax> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<VAT_Tax>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<VAT_Tax> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(VAT_Tax item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                VAT_Tax item=new VAT_Tax();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<VAT_Tax> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public VAT_Tax(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                VAT_Tax.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<VAT_Tax>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public VAT_Tax()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public VAT_Tax(Expression<Func<VAT_Tax, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<VAT_Tax> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<VAT_Tax> _repo;
            
            if(db.TestMode)
            {
                VAT_Tax.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<VAT_Tax>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<VAT_Tax> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static VAT_Tax SingleOrDefault(Expression<Func<VAT_Tax, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<VAT_Tax>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<VAT_Tax>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static VAT_Tax SingleOrDefault(Expression<Func<VAT_Tax, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<VAT_Tax>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<VAT_Tax>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<VAT_Tax, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<VAT_Tax, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<VAT_Tax> Find(Expression<Func<VAT_Tax, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<VAT_Tax>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<VAT_Tax>();
        }
        
        public static IList<VAT_Tax> Find(Expression<Func<VAT_Tax, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<VAT_Tax>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<VAT_Tax>();
        }
        
        public static IQueryable<VAT_Tax> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<VAT_Tax> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<VAT_Tax> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<VAT_Tax> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<VAT_Tax> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<VAT_Tax> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iName";
        }

        public object KeyValue()
        {
            return this.iName;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(VAT_Tax))
            {
                VAT_Tax compare=(VAT_Tax)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iName";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iRate;
        public string iRate
        {
            get 
            { 
				return _iRate; 
            }
            
            set
            {                
                _iRate=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iRate");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _idescription;
        public string idescription
        {
            get 
            { 
				return _idescription; 
            }
            
            set
            {                
                _idescription=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="idescription");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<VAT_Tax>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<VAT_Tax, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region Waiter Class
	   
    /// <summary>
    /// A class which represents the Waiter table in the PBM Database.
    /// </summary>
    public partial class Waiter: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<Waiter> TestItems;
        static TestRepository<Waiter> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<Waiter>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<Waiter> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(Waiter item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Waiter item=new Waiter();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<Waiter> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public Waiter(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Waiter.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Waiter>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public Waiter()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public Waiter(Expression<Func<Waiter, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<Waiter> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<Waiter> _repo;
            
            if(db.TestMode)
            {
                Waiter.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Waiter>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<Waiter> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Waiter SingleOrDefault(Expression<Func<Waiter, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<Waiter>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<Waiter>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static Waiter SingleOrDefault(Expression<Func<Waiter, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<Waiter>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<Waiter>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<Waiter, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<Waiter, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<Waiter> Find(Expression<Func<Waiter, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<Waiter>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<Waiter>();
        }
        
        public static IList<Waiter> Find(Expression<Func<Waiter, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<Waiter>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<Waiter>();
        }
        
        public static IQueryable<Waiter> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<Waiter> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Waiter> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Waiter> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Waiter> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<Waiter> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNO";
        }

        public object KeyValue()
        {
            return this.iNO;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iNO.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(Waiter))
            {
                Waiter compare=(Waiter)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iNO.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iNO";
        }
        
        public static string GetKeyColumn()
        {
            return "iNO";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iNO";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iNO;
        public string iNO
        {
            get 
            { 
				return _iNO; 
            }
            
            set
            {                
                _iNO=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNO");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Description;
        public string Description
        {
            get 
            { 
				return _Description; 
            }
            
            set
            {                
                _Description=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _pwd;
        public string pwd
        {
            get 
            { 
				return _pwd; 
            }
            
            set
            {                
                _pwd=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="pwd");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc1;
        public string Desc1
        {
            get 
            { 
				return _Desc1; 
            }
            
            set
            {                
                _Desc1=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc1");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc2;
        public string Desc2
        {
            get 
            { 
				return _Desc2; 
            }
            
            set
            {                
                _Desc2=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc2");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc3;
        public string Desc3
        {
            get 
            { 
				return _Desc3; 
            }
            
            set
            {                
                _Desc3=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc3");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc4;
        public string Desc4
        {
            get 
            { 
				return _Desc4; 
            }
            
            set
            {                
                _Desc4=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc4");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc5;
        public string Desc5
        {
            get 
            { 
				return _Desc5; 
            }
            
            set
            {                
                _Desc5=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc5");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc6;
        public string Desc6
        {
            get 
            { 
				return _Desc6; 
            }
            
            set
            {                
                _Desc6=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc6");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc7;
        public string Desc7
        {
            get 
            { 
				return _Desc7; 
            }
            
            set
            {                
                _Desc7=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc7");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc8;
        public string Desc8
        {
            get 
            { 
				return _Desc8; 
            }
            
            set
            {                
                _Desc8=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc8");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc9;
        public string Desc9
        {
            get 
            { 
				return _Desc9; 
            }
            
            set
            {                
                _Desc9=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc9");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc10;
        public string Desc10
        {
            get 
            { 
				return _Desc10; 
            }
            
            set
            {                
                _Desc10=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc10");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc11;
        public string Desc11
        {
            get 
            { 
				return _Desc11; 
            }
            
            set
            {                
                _Desc11=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc11");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc12;
        public string Desc12
        {
            get 
            { 
				return _Desc12; 
            }
            
            set
            {                
                _Desc12=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc12");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<Waiter>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<Waiter, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region WaiterReportX Class
	   
    /// <summary>
    /// A class which represents the WaiterReportX table in the PBM Database.
    /// </summary>
    public partial class WaiterReportX: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<WaiterReportX> TestItems;
        static TestRepository<WaiterReportX> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<WaiterReportX>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<WaiterReportX> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(WaiterReportX item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                WaiterReportX item=new WaiterReportX();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<WaiterReportX> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public WaiterReportX(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                WaiterReportX.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<WaiterReportX>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public WaiterReportX()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public WaiterReportX(Expression<Func<WaiterReportX, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<WaiterReportX> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<WaiterReportX> _repo;
            
            if(db.TestMode)
            {
                WaiterReportX.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<WaiterReportX>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<WaiterReportX> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static WaiterReportX SingleOrDefault(Expression<Func<WaiterReportX, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<WaiterReportX>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<WaiterReportX>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static WaiterReportX SingleOrDefault(Expression<Func<WaiterReportX, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<WaiterReportX>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<WaiterReportX>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<WaiterReportX, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<WaiterReportX, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<WaiterReportX> Find(Expression<Func<WaiterReportX, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<WaiterReportX>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<WaiterReportX>();
        }
        
        public static IList<WaiterReportX> Find(Expression<Func<WaiterReportX, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<WaiterReportX>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<WaiterReportX>();
        }
        
        public static IQueryable<WaiterReportX> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<WaiterReportX> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<WaiterReportX> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<WaiterReportX> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<WaiterReportX> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<WaiterReportX> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iDesc.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(WaiterReportX))
            {
                WaiterReportX compare=(WaiterReportX)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iDesc.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iDesc";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iDesc";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDesc;
        public string iDesc
        {
            get 
            { 
				return _iDesc; 
            }
            
            set
            {                
                _iDesc=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDesc");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<WaiterReportX>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<WaiterReportX, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region WaiterReportZ Class
	   
    /// <summary>
    /// A class which represents the WaiterReportZ table in the PBM Database.
    /// </summary>
    public partial class WaiterReportZ: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<WaiterReportZ> TestItems;
        static TestRepository<WaiterReportZ> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<WaiterReportZ>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<WaiterReportZ> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(WaiterReportZ item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                WaiterReportZ item=new WaiterReportZ();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<WaiterReportZ> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public WaiterReportZ(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                WaiterReportZ.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<WaiterReportZ>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public WaiterReportZ()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public WaiterReportZ(Expression<Func<WaiterReportZ, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<WaiterReportZ> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<WaiterReportZ> _repo;
            
            if(db.TestMode)
            {
                WaiterReportZ.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<WaiterReportZ>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<WaiterReportZ> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static WaiterReportZ SingleOrDefault(Expression<Func<WaiterReportZ, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<WaiterReportZ>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<WaiterReportZ>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static WaiterReportZ SingleOrDefault(Expression<Func<WaiterReportZ, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<WaiterReportZ>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<WaiterReportZ>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<WaiterReportZ, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<WaiterReportZ, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<WaiterReportZ> Find(Expression<Func<WaiterReportZ, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<WaiterReportZ>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<WaiterReportZ>();
        }
        
        public static IList<WaiterReportZ> Find(Expression<Func<WaiterReportZ, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<WaiterReportZ>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<WaiterReportZ>();
        }
        
        public static IQueryable<WaiterReportZ> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<WaiterReportZ> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<WaiterReportZ> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<WaiterReportZ> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<WaiterReportZ> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<WaiterReportZ> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNo";
        }

        public object KeyValue()
        {
            return this.iNo;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iDesc.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(WaiterReportZ))
            {
                WaiterReportZ compare=(WaiterReportZ)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iDesc.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iDesc";
        }
        
        public static string GetKeyColumn()
        {
            return "iNo";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iDesc";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long? _iNo;
        public long? iNo
        {
            get 
            { 
				return _iNo; 
            }
            
            set
            {                
                _iNo=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNo");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDesc;
        public string iDesc
        {
            get 
            { 
				return _iDesc; 
            }
            
            set
            {                
                _iDesc=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDesc");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iValue;
        public string iValue
        {
            get 
            { 
				return _iValue; 
            }
            
            set
            {                
                _iValue=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iValue");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<WaiterReportZ>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<WaiterReportZ, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region Weight Class
	   
    /// <summary>
    /// A class which represents the Weight table in the PBM Database.
    /// </summary>
    public partial class Weight: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<Weight> TestItems;
        static TestRepository<Weight> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<Weight>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<Weight> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(Weight item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Weight item=new Weight();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<Weight> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public Weight(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Weight.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Weight>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public Weight()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public Weight(Expression<Func<Weight, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<Weight> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<Weight> _repo;
            
            if(db.TestMode)
            {
                Weight.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Weight>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<Weight> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Weight SingleOrDefault(Expression<Func<Weight, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<Weight>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<Weight>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static Weight SingleOrDefault(Expression<Func<Weight, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<Weight>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<Weight>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<Weight, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<Weight, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<Weight> Find(Expression<Func<Weight, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<Weight>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<Weight>();
        }
        
        public static IList<Weight> Find(Expression<Func<Weight, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<Weight>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<Weight>();
        }
        
        public static IQueryable<Weight> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<Weight> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Weight> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Weight> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Weight> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<Weight> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "Index";
        }

        public object KeyValue()
        {
            return this.Index;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.id.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(Weight))
            {
                Weight compare=(Weight)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.id.ToString();
        }

        public string DescriptorColumn() 
        {
            return "id";
        }
        
        public static string GetKeyColumn()
        {
            return "Index";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "id";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long _Index;
        public long Index
        {
            get 
            { 
				return _Index; 
            }
            
            set
            {                
                _Index=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Index");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _id;
        public long? id
        {
            get 
            { 
				return _id; 
            }
            
            set
            {                
                _id=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="id");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _code_len;
        public long? code_len
        {
            get 
            { 
				return _code_len; 
            }
            
            set
            {                
                _code_len=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="code_len");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _flag;
        public long? flag
        {
            get 
            { 
				return _flag; 
            }
            
            set
            {                
                _flag=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="flag");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<Weight>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<Weight, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region FCE Class
	   
    /// <summary>
    /// A class which represents the FCE table in the PBM Database.
    /// </summary>
    public partial class FCE: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<FCE> TestItems;
        static TestRepository<FCE> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<FCE>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<FCE> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(FCE item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                FCE item=new FCE();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<FCE> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public FCE(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                FCE.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<FCE>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public FCE()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public FCE(Expression<Func<FCE, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<FCE> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<FCE> _repo;
            
            if(db.TestMode)
            {
                FCE.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<FCE>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<FCE> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static FCE SingleOrDefault(Expression<Func<FCE, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<FCE>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<FCE>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static FCE SingleOrDefault(Expression<Func<FCE, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<FCE>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<FCE>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<FCE, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<FCE, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<FCE> Find(Expression<Func<FCE, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<FCE>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<FCE>();
        }
        
        public static IList<FCE> Find(Expression<Func<FCE, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<FCE>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<FCE>();
        }
        
        public static IQueryable<FCE> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<FCE> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<FCE> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<FCE> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<FCE> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<FCE> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iName";
        }

        public object KeyValue()
        {
            return this.iName;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<string>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.iName.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(FCE))
            {
                FCE compare=(FCE)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.iName.ToString();
        }

        public string DescriptorColumn() 
        {
            return "iName";
        }
        
        public static string GetKeyColumn()
        {
            return "iName";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "iName";
        }
        
        #region ' Foreign Keys '
        #endregion     

        string _iName;
        public string iName
        {
            get 
            { 
				return _iName; 
            }
            
            set
            {                
                _iName=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iName");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _iRate;
        public long? iRate
        {
            get 
            { 
				return _iRate; 
            }
            
            set
            {                
                _iRate=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iRate");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iRounding;
        public string iRounding
        {
            get 
            { 
				return _iRounding; 
            }
            
            set
            {                
                _iRounding=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iRounding");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iFlag;
        public string iFlag
        {
            get 
            { 
				return _iFlag; 
            }
            
            set
            {                
                _iFlag=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iFlag");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDot;
        public string iDot
        {
            get 
            { 
				return _iDot; 
            }
            
            set
            {                
                _iDot=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDot");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _iDescription;
        public string iDescription
        {
            get 
            { 
				return _iDescription; 
            }
            
            set
            {                
                _iDescription=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iDescription");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _symbol;
        public string symbol
        {
            get 
            { 
				return _symbol; 
            }
            
            set
            {                
                _symbol=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="symbol");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _decimall;
        public string decimall
        {
            get 
            { 
				return _decimall; 
            }
            
            set
            {                
                _decimall=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="decimall");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        long? _FC_rate;
        public long? FC_rate
        {
            get 
            { 
				return _FC_rate; 
            }
            
            set
            {                
                _FC_rate=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FC_rate");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        double? _Local_rate;
        public double? Local_rate
        {
            get 
            { 
				return _Local_rate; 
            }
            
            set
            {                
                _Local_rate=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Local_rate");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc1;
        public string Desc1
        {
            get 
            { 
				return _Desc1; 
            }
            
            set
            {                
                _Desc1=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc1");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc2;
        public string Desc2
        {
            get 
            { 
				return _Desc2; 
            }
            
            set
            {                
                _Desc2=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc2");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc3;
        public string Desc3
        {
            get 
            { 
				return _Desc3; 
            }
            
            set
            {                
                _Desc3=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc3");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc4;
        public string Desc4
        {
            get 
            { 
				return _Desc4; 
            }
            
            set
            {                
                _Desc4=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc4");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc5;
        public string Desc5
        {
            get 
            { 
				return _Desc5; 
            }
            
            set
            {                
                _Desc5=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc5");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc6;
        public string Desc6
        {
            get 
            { 
				return _Desc6; 
            }
            
            set
            {                
                _Desc6=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc6");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc7;
        public string Desc7
        {
            get 
            { 
				return _Desc7; 
            }
            
            set
            {                
                _Desc7=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc7");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc8;
        public string Desc8
        {
            get 
            { 
				return _Desc8; 
            }
            
            set
            {                
                _Desc8=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc8");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc9;
        public string Desc9
        {
            get 
            { 
				return _Desc9; 
            }
            
            set
            {                
                _Desc9=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc9");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc10;
        public string Desc10
        {
            get 
            { 
				return _Desc10; 
            }
            
            set
            {                
                _Desc10=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc10");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc11;
        public string Desc11
        {
            get 
            { 
				return _Desc11; 
            }
            
            set
            {                
                _Desc11=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc11");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc12;
        public string Desc12
        {
            get 
            { 
				return _Desc12; 
            }
            
            set
            {                
                _Desc12=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc12");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc13;
        public string Desc13
        {
            get 
            { 
				return _Desc13; 
            }
            
            set
            {                
                _Desc13=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc13");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc14;
        public string Desc14
        {
            get 
            { 
				return _Desc14; 
            }
            
            set
            {                
                _Desc14=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc14");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc15;
        public string Desc15
        {
            get 
            { 
				return _Desc15; 
            }
            
            set
            {                
                _Desc15=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc15");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc16;
        public string Desc16
        {
            get 
            { 
				return _Desc16; 
            }
            
            set
            {                
                _Desc16=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc16");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<FCE>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<FCE, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 

	#region Clerk Class
	   
    /// <summary>
    /// A class which represents the Clerk table in the PBM Database.
    /// </summary>
    public partial class Clerk: IActiveRecord
    {    
        #region Built-in testing
        
        static IList<Clerk> TestItems;
        static TestRepository<Clerk> _testRepo;
        
        public void SetIsLoaded(bool isLoaded)
        {
            _isLoaded=isLoaded;
        }
        
        static void SetTestRepo()
        {
            _testRepo  =  _testRepo ?? new TestRepository<Clerk>(new PBM.DAL.PBMDB());
        }
        
        public static void ResetTestRepo()
        {
            _testRepo = null;
            SetTestRepo();
        }
        
        public static void Setup(List<Clerk> testlist)
        {
            SetTestRepo();
            _testRepo._items = testlist;
        }
        
        public static void Setup(Clerk item) 
        {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        
        public static void Setup(int testItems) 
        {
            SetTestRepo();
            for(int i=0;i<testItems;i++)
            {
                Clerk item=new Clerk();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;

        #endregion

        IRepository<Clerk> _repo;
        ITable tbl;
        bool _isNew;
        
        public bool IsNew()
        {
            return _isNew;
        }
        
        public void SetIsNew(bool isNew)
        {
            _isNew=isNew;
        }
        
        bool _isLoaded;
        public bool IsLoaded()
        {
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty()
        {
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns ()
        {
            return _dirtyColumns;
        }

        PBM.DAL.PBMDB _db;
        public Clerk(string connectionString, string providerName) 
        {

            _db=new PBM.DAL.PBMDB(connectionString, providerName);
            Init();            
         }
         
        void Init()
        {
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode)
            {
                Clerk.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Clerk>(_db);
            }
            
            tbl=_repo.GetTable();
            _isNew = true;
            OnCreated();
        }
        
        public Clerk()
        {
             _db=new PBM.DAL.PBMDB();
            Init();            
        }        
       
        partial void OnCreated();            
        partial void OnLoaded();        
        partial void OnSaved();        
        partial void OnChanged();
        
        public IList<IColumn> Columns
        {
            get
            {
                return tbl.Columns;
            }
        }

        public Clerk(Expression<Func<Clerk, bool>> expression):this() 
        {
            _isLoaded=_repo.Load(this,expression);
            if(_isLoaded)
                OnLoaded();
        }
        
        internal static IRepository<Clerk> GetRepo(string connectionString, string providerName)
        {
            PBM.DAL.PBMDB db;
            if(String.IsNullOrEmpty(connectionString))
            {
                db=new PBM.DAL.PBMDB();
            }
            else
            {
                db=new PBM.DAL.PBMDB(connectionString, providerName);
            }
            
            IRepository<Clerk> _repo;
            
            if(db.TestMode)
            {
                Clerk.SetTestRepo();
                _repo=_testRepo;
            }
            else
            {
                _repo = new SubSonicRepository<Clerk>(db);
            }
            
            return _repo;        
        }       
        
        internal static IRepository<Clerk> GetRepo()
        {
            return GetRepo("","");
        }
        
        public static Clerk SingleOrDefault(Expression<Func<Clerk, bool>> expression)
        {           
            var qry=new SubSonic.Query.Select().From<Clerk>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<Clerk>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }
              
        public static Clerk SingleOrDefault(Expression<Func<Clerk, bool>> expression,string connectionString, string providerName)
        {            
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<Clerk>();
            qry.Constraints=expression.ParseConstraints().ToList();
            var single=qry.ExecuteSingle<Clerk>();
            
            if (single != null)
                single.OnLoaded();
                
            return single;
        }        
        
        public static bool Exists(Expression<Func<Clerk, bool>> expression,string connectionString, string providerName)
        {           
            return All(connectionString,providerName).Any(expression);
        }
                
        public static bool Exists(Expression<Func<Clerk, bool>> expression) 
        {
           
            return All().Any(expression);
        }        

        public static IList<Clerk> Find(Expression<Func<Clerk, bool>> expression)
        {            
            var qry=new SubSonic.Query.Select().From<Clerk>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<Clerk>();
        }
        
        public static IList<Clerk> Find(Expression<Func<Clerk, bool>> expression,string connectionString, string providerName) 
        {
            var provider=ProviderFactory.GetProvider(connectionString,providerName);
            var qry=new SubSonic.Query.Select(provider).From<Clerk>();
            qry.Constraints=expression.ParseConstraints().ToList();
            
            return qry.ToList<Clerk>();
        }
        
        public static IQueryable<Clerk> All(string connectionString, string providerName) 
        {
            return GetRepo(connectionString,providerName).GetAll();
        }
        
        public static IQueryable<Clerk> All() 
        {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Clerk> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Clerk> GetPaged(string sortBy, int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Clerk> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName)
        {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);            
        }

        public static PagedList<Clerk> GetPaged(int pageIndex, int pageSize) 
        {
            return GetRepo().GetPaged(pageIndex, pageSize);            
        }

        public string KeyName()
        {
            return "iNO";
        }

        public object KeyValue()
        {
            return this.iNO;
        }
        
        public void SetKeyValue(object value)
        {
            if (value != null)
             {
                var settable = value.ChangeTypeTo<long>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString()
        {
            return this.Description.ToString();
        }

        public override bool Equals(object obj)
        {
            if(obj.GetType()==typeof(Clerk))
            {
                Clerk compare=(Clerk)obj;
                return compare.KeyValue()==this.KeyValue();
            }
            else
            {
                return base.Equals(obj);
            }
        }

        public string DescriptorValue()
        {
            return this.Description.ToString();
        }

        public string DescriptorColumn() 
        {
            return "Description";
        }
        
        public static string GetKeyColumn()
        {
            return "iNO";
        }  
              
        public static string GetDescriptorColumn()
        {
            return "Description";
        }
        
        #region ' Foreign Keys '
        #endregion     

        long _iNO;
        public long iNO
        {
            get 
            { 
				return _iNO; 
            }
            
            set
            {                
                _iNO=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="iNO");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Description;
        public string Description
        {
            get 
            { 
				return _Description; 
            }
            
            set
            {                
                _Description=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _pwd;
        public string pwd
        {
            get 
            { 
				return _pwd; 
            }
            
            set
            {                
                _pwd=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="pwd");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Limits;
        public string Limits
        {
            get 
            { 
				return _Limits; 
            }
            
            set
            {                
                _Limits=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Limits");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc1;
        public string Desc1
        {
            get 
            { 
				return _Desc1; 
            }
            
            set
            {                
                _Desc1=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc1");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc2;
        public string Desc2
        {
            get 
            { 
				return _Desc2; 
            }
            
            set
            {                
                _Desc2=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc2");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc3;
        public string Desc3
        {
            get 
            { 
				return _Desc3; 
            }
            
            set
            {                
                _Desc3=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc3");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc4;
        public string Desc4
        {
            get 
            { 
				return _Desc4; 
            }
            
            set
            {                
                _Desc4=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc4");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc5;
        public string Desc5
        {
            get 
            { 
				return _Desc5; 
            }
            
            set
            {                
                _Desc5=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc5");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc6;
        public string Desc6
        {
            get 
            { 
				return _Desc6; 
            }
            
            set
            {                
                _Desc6=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc6");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc7;
        public string Desc7
        {
            get 
            { 
				return _Desc7; 
            }
            
            set
            {                
                _Desc7=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc7");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc8;
        public string Desc8
        {
            get 
            { 
				return _Desc8; 
            }
            
            set
            {                
                _Desc8=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc8");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc9;
        public string Desc9
        {
            get 
            { 
				return _Desc9; 
            }
            
            set
            {                
                _Desc9=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc9");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc10;
        public string Desc10
        {
            get 
            { 
				return _Desc10; 
            }
            
            set
            {                
                _Desc10=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc10");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc11;
        public string Desc11
        {
            get 
            { 
				return _Desc11; 
            }
            
            set
            {                
                _Desc11=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc11");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc12;
        public string Desc12
        {
            get 
            { 
				return _Desc12; 
            }
            
            set
            {                
                _Desc12=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc12");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc13;
        public string Desc13
        {
            get 
            { 
				return _Desc13; 
            }
            
            set
            {                
                _Desc13=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc13");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc14;
        public string Desc14
        {
            get 
            { 
				return _Desc14; 
            }
            
            set
            {                
                _Desc14=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc14");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc15;
        public string Desc15
        {
            get 
            { 
				return _Desc15; 
            }
            
            set
            {                
                _Desc15=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc15");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc16;
        public string Desc16
        {
            get 
            { 
				return _Desc16; 
            }
            
            set
            {                
                _Desc16=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc16");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc17;
        public string Desc17
        {
            get 
            { 
				return _Desc17; 
            }
            
            set
            {                
                _Desc17=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc17");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc18;
        public string Desc18
        {
            get 
            { 
				return _Desc18; 
            }
            
            set
            {                
                _Desc18=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc18");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc19;
        public string Desc19
        {
            get 
            { 
				return _Desc19; 
            }
            
            set
            {                
                _Desc19=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc19");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc20;
        public string Desc20
        {
            get 
            { 
				return _Desc20; 
            }
            
            set
            {                
                _Desc20=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc20");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc21;
        public string Desc21
        {
            get 
            { 
				return _Desc21; 
            }
            
            set
            {                
                _Desc21=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc21");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc22;
        public string Desc22
        {
            get 
            { 
				return _Desc22; 
            }
            
            set
            {                
                _Desc22=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc22");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc23;
        public string Desc23
        {
            get 
            { 
				return _Desc23; 
            }
            
            set
            {                
                _Desc23=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc23");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        string _Desc24;
        public string Desc24
        {
            get 
            { 
				return _Desc24; 
            }
            
            set
            {                
                _Desc24=value;
                var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Desc24");
                if(col!=null)
                {
                    if(!_dirtyColumns.Contains(col) && _isLoaded)
                    {
                        _dirtyColumns.Add(col);
                    }
                }
                
                OnChanged();
            }
        }
        
        public DbCommand GetUpdateCommand() 
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();            
        }
        
        public DbCommand GetInsertCommand()
        { 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand()
        {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        //persistence
        public void Save()
        {
            Save("");
        }
        
        public void Update(string userName)
        {
            _repo.Update(this);
            OnSaved();
       }
        
        public void Add(string userName)
        {
            this.SetKeyValue(_repo.Add(this));
            OnSaved();
        }
        
        public void Save(string userName) 
        {
            if (_isNew) 
            {
                Add(userName);                
            }
            else 
            {
                Update(userName);
            }            
        }

        public void Delete()
        {
            _repo.Delete(KeyValue());
						
        }

        public static void Delete(object key) 
        {        
            var repo = new SubSonicRepository<Clerk>(new PBM.DAL.PBMDB());
             
            repo.Delete(key);            
        }

        public static void DeleteMany(Expression<Func<Clerk, bool>> expression)
        {
            var repo = GetRepo();            
  
            repo.DeleteMany(expression);            
        }
        
        public void Load(IDataReader rdr)
        {
            Load(rdr, true);
        }
        
        public void Load(IDataReader rdr, bool closeReader)
        {
            if (rdr.Read())
             {
                try
                {
                    rdr.Load(this);
                    _isNew = false;
                    _isLoaded = true;
                } 
                catch 
                {
                    _isLoaded = false;
                    throw;
                }
            }
            else
            {
                _isLoaded = false;
            }

            if (closeReader)
                rdr.Dispose();
        }
    }

	#endregion 
}
